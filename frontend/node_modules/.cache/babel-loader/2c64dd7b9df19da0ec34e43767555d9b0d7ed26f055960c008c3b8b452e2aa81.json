{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { utf8ToBytes, writeUInt32BE } from '@stacks/common';\nimport { getCryptoLib } from './cryptoUtils';\nexport var NodeCryptoPbkdf2 = /*#__PURE__*/function () {\n  function NodeCryptoPbkdf2(nodePbkdf2) {\n    _classCallCheck(this, NodeCryptoPbkdf2);\n    this.nodePbkdf2 = nodePbkdf2;\n  }\n  _createClass(NodeCryptoPbkdf2, [{\n    key: \"derive\",\n    value: function () {\n      var _derive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(password, salt, iterations, keyLength, digest) {\n        var _this = this;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(digest !== 'sha512' && digest !== 'sha256')) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error(\"Unsupported digest \\\"\".concat(digest, \"\\\" for Pbkdf2\"));\n            case 2:\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                _this.nodePbkdf2(password, salt, iterations, keyLength, digest, function (error, result) {\n                  if (error) {\n                    reject(error);\n                  }\n                  resolve(result);\n                });\n              }));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function derive(_x, _x2, _x3, _x4, _x5) {\n        return _derive.apply(this, arguments);\n      }\n      return derive;\n    }()\n  }]);\n  return NodeCryptoPbkdf2;\n}();\nexport var WebCryptoPbkdf2 = /*#__PURE__*/function () {\n  function WebCryptoPbkdf2(subtleCrypto) {\n    _classCallCheck(this, WebCryptoPbkdf2);\n    this.subtleCrypto = subtleCrypto;\n  }\n  _createClass(WebCryptoPbkdf2, [{\n    key: \"derive\",\n    value: function () {\n      var _derive2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(password, salt, iterations, keyLength, digest) {\n        var algo, passwordBytes, key, result, partialWebCrypto;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(digest === 'sha256')) {\n                _context2.next = 4;\n                break;\n              }\n              algo = 'SHA-256';\n              _context2.next = 9;\n              break;\n            case 4:\n              if (!(digest === 'sha512')) {\n                _context2.next = 8;\n                break;\n              }\n              algo = 'SHA-512';\n              _context2.next = 9;\n              break;\n            case 8:\n              throw new Error(\"Unsupported Pbkdf2 digest algorithm \\\"\".concat(digest, \"\\\"\"));\n            case 9:\n              passwordBytes = utf8ToBytes(password);\n              _context2.prev = 10;\n              _context2.next = 13;\n              return this.subtleCrypto.importKey('raw', passwordBytes, 'PBKDF2', false, ['deriveBits']);\n            case 13:\n              key = _context2.sent;\n              _context2.next = 16;\n              return this.subtleCrypto.deriveBits({\n                name: 'PBKDF2',\n                salt: salt,\n                iterations: iterations,\n                hash: {\n                  name: algo\n                }\n              }, key, keyLength * 8);\n            case 16:\n              result = _context2.sent;\n              return _context2.abrupt(\"return\", new Uint8Array(result));\n            case 20:\n              _context2.prev = 20;\n              _context2.t0 = _context2[\"catch\"](10);\n              partialWebCrypto = new WebCryptoPartialPbkdf2(this.subtleCrypto);\n              return _context2.abrupt(\"return\", partialWebCrypto.derive(password, salt, iterations, keyLength, digest));\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[10, 20]]);\n      }));\n      function derive(_x6, _x7, _x8, _x9, _x10) {\n        return _derive2.apply(this, arguments);\n      }\n      return derive;\n    }()\n  }]);\n  return WebCryptoPbkdf2;\n}();\nexport var WebCryptoPartialPbkdf2 = /*#__PURE__*/function () {\n  function WebCryptoPartialPbkdf2(subtleCrypto) {\n    _classCallCheck(this, WebCryptoPartialPbkdf2);\n    this.subtleCrypto = subtleCrypto;\n  }\n  _createClass(WebCryptoPartialPbkdf2, [{\n    key: \"derive\",\n    value: function () {\n      var _derive3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(password, salt, iterations, keyLength, digest) {\n        var _this2 = this;\n        var passwordBytes, algo, algoOpts, hmacDigest, DK, saltLength, block1, destPos, hLen, l, i, T, U, j, k;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(digest !== 'sha512' && digest !== 'sha256')) {\n                _context3.next = 2;\n                break;\n              }\n              throw new Error(\"Unsupported digest \\\"\".concat(digest, \"\\\" for Pbkdf2\"));\n            case 2:\n              passwordBytes = utf8ToBytes(password);\n              algo = digest === 'sha512' ? 'SHA-512' : 'SHA-256';\n              algoOpts = {\n                name: 'HMAC',\n                hash: algo\n              };\n              hmacDigest = function hmacDigest(key, data) {\n                return _this2.subtleCrypto.importKey('raw', key, algoOpts, true, ['sign']).then(function (cryptoKey) {\n                  return _this2.subtleCrypto.sign(algoOpts, cryptoKey, data);\n                }).then(function (result) {\n                  return new Uint8Array(result);\n                });\n              };\n              DK = new Uint8Array(keyLength);\n              saltLength = salt.length;\n              block1 = new Uint8Array(saltLength + 4);\n              block1.set(salt);\n              destPos = 0;\n              hLen = digest === 'sha512' ? 64 : 32;\n              l = Math.ceil(keyLength / hLen);\n              i = 1;\n            case 14:\n              if (!(i <= l)) {\n                _context3.next = 34;\n                break;\n              }\n              writeUInt32BE(block1, i, saltLength);\n              _context3.next = 18;\n              return hmacDigest(passwordBytes, block1);\n            case 18:\n              T = _context3.sent;\n              U = T;\n              j = 1;\n            case 21:\n              if (!(j < iterations)) {\n                _context3.next = 29;\n                break;\n              }\n              _context3.next = 24;\n              return hmacDigest(passwordBytes, U);\n            case 24:\n              U = _context3.sent;\n              for (k = 0; k < hLen; k++) {\n                T[k] ^= U[k];\n              }\n            case 26:\n              j++;\n              _context3.next = 21;\n              break;\n            case 29:\n              DK.set(T.subarray(0, DK.byteLength - destPos), destPos);\n              destPos += hLen;\n            case 31:\n              i++;\n              _context3.next = 14;\n              break;\n            case 34:\n              return _context3.abrupt(\"return\", DK);\n            case 35:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function derive(_x11, _x12, _x13, _x14, _x15) {\n        return _derive3.apply(this, arguments);\n      }\n      return derive;\n    }()\n  }]);\n  return WebCryptoPartialPbkdf2;\n}();\nexport function createPbkdf2() {\n  return _createPbkdf.apply(this, arguments);\n}\nfunction _createPbkdf() {\n  _createPbkdf = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var cryptoLib;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return getCryptoLib();\n        case 2:\n          cryptoLib = _context4.sent;\n          if (!(cryptoLib.name === 'subtleCrypto')) {\n            _context4.next = 5;\n            break;\n          }\n          return _context4.abrupt(\"return\", new WebCryptoPbkdf2(cryptoLib.lib));\n        case 5:\n          return _context4.abrupt(\"return\", new NodeCryptoPbkdf2(cryptoLib.lib.pbkdf2));\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _createPbkdf.apply(this, arguments);\n}","map":{"version":3,"names":["utf8ToBytes","writeUInt32BE","getCryptoLib","NodeCryptoPbkdf2","nodePbkdf2","_classCallCheck","_createClass","key","value","_derive","_asyncToGenerator","_regeneratorRuntime","mark","_callee","password","salt","iterations","keyLength","digest","_this","wrap","_callee$","_context","prev","next","Error","concat","abrupt","Promise","resolve","reject","error","result","stop","derive","_x","_x2","_x3","_x4","_x5","apply","arguments","WebCryptoPbkdf2","subtleCrypto","_derive2","_callee2","algo","passwordBytes","partialWebCrypto","_callee2$","_context2","importKey","sent","deriveBits","name","hash","Uint8Array","t0","WebCryptoPartialPbkdf2","_x6","_x7","_x8","_x9","_x10","_derive3","_callee3","_this2","algoOpts","hmacDigest","DK","saltLength","block1","destPos","hLen","l","i","T","U","j","k","_callee3$","_context3","data","then","cryptoKey","sign","length","set","Math","ceil","subarray","byteLength","_x11","_x12","_x13","_x14","_x15","createPbkdf2","_createPbkdf","_callee4","cryptoLib","_callee4$","_context4","lib","pbkdf2"],"sources":["C:\\Users\\rajde\\gitrep\\deploy\\frontend\\node_modules\\@stacks\\encryption\\src\\pbkdf2.ts"],"sourcesContent":["import { utf8ToBytes, writeUInt32BE } from '@stacks/common';\nimport { getCryptoLib } from './cryptoUtils';\n\nexport type Pbkdf2Digests = 'sha512' | 'sha256';\n\nexport interface Pbkdf2 {\n  derive(\n    password: string,\n    salt: Uint8Array,\n    iterations: number,\n    keyLength: number,\n    digest: Pbkdf2Digests\n  ): Promise<Uint8Array>;\n}\n\ntype NodePbkdf2Fn = typeof import('crypto').pbkdf2;\n\nexport class NodeCryptoPbkdf2 implements Pbkdf2 {\n  nodePbkdf2: NodePbkdf2Fn;\n\n  constructor(nodePbkdf2: NodePbkdf2Fn) {\n    this.nodePbkdf2 = nodePbkdf2;\n  }\n\n  async derive(\n    password: string,\n    salt: Uint8Array,\n    iterations: number,\n    keyLength: number,\n    digest: Pbkdf2Digests\n  ): Promise<Uint8Array> {\n    if (digest !== 'sha512' && digest !== 'sha256') {\n      throw new Error(`Unsupported digest \"${digest}\" for Pbkdf2`);\n    }\n    return new Promise((resolve, reject) => {\n      this.nodePbkdf2(password, salt, iterations, keyLength, digest, (error, result) => {\n        if (error) {\n          reject(error);\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport class WebCryptoPbkdf2 implements Pbkdf2 {\n  subtleCrypto: SubtleCrypto;\n\n  constructor(subtleCrypto: SubtleCrypto) {\n    this.subtleCrypto = subtleCrypto;\n  }\n\n  async derive(\n    password: string,\n    salt: Uint8Array,\n    iterations: number,\n    keyLength: number,\n    digest: Pbkdf2Digests\n  ): Promise<Uint8Array> {\n    let algo: string;\n    if (digest === 'sha256') {\n      algo = 'SHA-256';\n    } else if (digest === 'sha512') {\n      algo = 'SHA-512';\n    } else {\n      throw new Error(`Unsupported Pbkdf2 digest algorithm \"${digest}\"`);\n    }\n\n    const passwordBytes = utf8ToBytes(password);\n    try {\n      const key = await this.subtleCrypto.importKey('raw', passwordBytes, 'PBKDF2', false, [\n        'deriveBits',\n      ]);\n      const result = await this.subtleCrypto.deriveBits(\n        {\n          name: 'PBKDF2',\n          salt,\n          iterations,\n          hash: { name: algo },\n        },\n        key,\n        keyLength * 8\n      );\n      return new Uint8Array(result);\n    } catch (error) {\n      // Browser appears to support WebCrypto but missing pbkdf2 support.\n      const partialWebCrypto = new WebCryptoPartialPbkdf2(this.subtleCrypto);\n      return partialWebCrypto.derive(password, salt, iterations, keyLength, digest);\n    }\n  }\n}\n\nexport class WebCryptoPartialPbkdf2 implements Pbkdf2 {\n  // An async implementation for browsers that support WebCrypto hmac\n  // but not pbkdf2. Extracted from crypto-browserify/pbkdf2 and modified to\n  // use WebCrypto for hmac operations.\n  // Original: https://github.com/crypto-browserify/pbkdf2/tree/v3.0.17/lib\n\n  subtleCrypto: SubtleCrypto;\n\n  constructor(subtleCrypto: SubtleCrypto) {\n    this.subtleCrypto = subtleCrypto;\n  }\n\n  async derive(\n    password: string,\n    salt: Uint8Array,\n    iterations: number,\n    keyLength: number,\n    digest: Pbkdf2Digests\n  ): Promise<Uint8Array> {\n    if (digest !== 'sha512' && digest !== 'sha256') {\n      throw new Error(`Unsupported digest \"${digest}\" for Pbkdf2`);\n    }\n    const passwordBytes = utf8ToBytes(password);\n    const algo = digest === 'sha512' ? 'SHA-512' : 'SHA-256';\n    const algoOpts = { name: 'HMAC', hash: algo };\n    const hmacDigest = (key: ArrayBuffer, data: ArrayBuffer) =>\n      this.subtleCrypto\n        .importKey('raw', key, algoOpts, true, ['sign'])\n        .then(cryptoKey => this.subtleCrypto.sign(algoOpts, cryptoKey, data))\n        .then(result => new Uint8Array(result));\n\n    const DK = new Uint8Array(keyLength);\n    const saltLength = salt.length;\n    const block1 = new Uint8Array(saltLength + 4);\n    block1.set(salt);\n    let destPos = 0;\n    const hLen = digest === 'sha512' ? 64 : 32;\n    const l = Math.ceil(keyLength / hLen);\n\n    for (let i = 1; i <= l; i++) {\n      writeUInt32BE(block1, i, saltLength);\n      const T = await hmacDigest(passwordBytes, block1);\n      let U = T;\n      for (let j = 1; j < iterations; j++) {\n        U = await hmacDigest(passwordBytes, U);\n        for (let k = 0; k < hLen; k++) {\n          T[k] ^= U[k];\n        }\n      }\n      DK.set(T.subarray(0, DK.byteLength - destPos), destPos);\n      destPos += hLen;\n    }\n    return DK;\n  }\n}\n\nexport async function createPbkdf2(): Promise<Pbkdf2> {\n  const cryptoLib = await getCryptoLib();\n  if (cryptoLib.name === 'subtleCrypto') {\n    return new WebCryptoPbkdf2(cryptoLib.lib);\n  }\n  return new NodeCryptoPbkdf2(cryptoLib.lib.pbkdf2);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}