{"ast":null,"code":"import _classCallCheck from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nvar HMAC = /*#__PURE__*/function (_Hash) {\n  _inherits(HMAC, _Hash);\n  var _super = _createSuper(HMAC);\n  function HMAC(hash, _key) {\n    var _this;\n    _classCallCheck(this, HMAC);\n    _this = _super.call(this);\n    _this.finished = false;\n    _this.destroyed = false;\n    assert.hash(hash);\n    var key = toBytes(_key);\n    _this.iHash = hash.create();\n    if (typeof _this.iHash.update !== 'function') throw new TypeError('Expected instance of class which extends utils.Hash');\n    _this.blockLen = _this.iHash.blockLen;\n    _this.outputLen = _this.iHash.outputLen;\n    var blockLen = _this.blockLen;\n    var pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (var i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    _this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    _this.oHash = hash.create();\n    // Undo internal XOR && apply outer XOR\n    for (var _i = 0; _i < pad.length; _i++) pad[_i] ^= 0x36 ^ 0x5c;\n    _this.oHash.update(pad);\n    pad.fill(0);\n    return _this;\n  }\n  _createClass(HMAC, [{\n    key: \"update\",\n    value: function update(buf) {\n      assert.exists(this);\n      this.iHash.update(buf);\n      return this;\n    }\n  }, {\n    key: \"digestInto\",\n    value: function digestInto(out) {\n      assert.exists(this);\n      assert.bytes(out, this.outputLen);\n      this.finished = true;\n      this.iHash.digestInto(out);\n      this.oHash.update(out);\n      this.oHash.digestInto(out);\n      this.destroy();\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      var out = new Uint8Array(this.oHash.outputLen);\n      this.digestInto(out);\n      return out;\n    }\n  }, {\n    key: \"_cloneInto\",\n    value: function _cloneInto(to) {\n      // Create new instance without calling constructor since key already in state and we don't know it.\n      to || (to = Object.create(Object.getPrototypeOf(this), {}));\n      var oHash = this.oHash,\n        iHash = this.iHash,\n        finished = this.finished,\n        destroyed = this.destroyed,\n        blockLen = this.blockLen,\n        outputLen = this.outputLen;\n      to = to;\n      to.finished = finished;\n      to.destroyed = destroyed;\n      to.blockLen = blockLen;\n      to.outputLen = outputLen;\n      to.oHash = oHash._cloneInto(to.oHash);\n      to.iHash = iHash._cloneInto(to.iHash);\n      return to;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.oHash.destroy();\n      this.iHash.destroy();\n    }\n  }]);\n  return HMAC;\n}(Hash);\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport var hmac = function hmac(hash, key, message) {\n  return new HMAC(hash, key).update(message).digest();\n};\nhmac.create = function (hash, key) {\n  return new HMAC(hash, key);\n};","map":{"version":3,"names":["assert","Hash","toBytes","HMAC","_Hash","_inherits","_super","_createSuper","hash","_key","_this","_classCallCheck","call","finished","destroyed","key","iHash","create","update","TypeError","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","fill","_createClass","value","buf","exists","digestInto","out","bytes","destroy","_cloneInto","to","Object","getPrototypeOf","hmac","message"],"sources":["C:/Users/rajde/gitrep/deploy/frontend/node_modules/@noble/hashes/esm/hmac.js"],"sourcesContent":["import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}