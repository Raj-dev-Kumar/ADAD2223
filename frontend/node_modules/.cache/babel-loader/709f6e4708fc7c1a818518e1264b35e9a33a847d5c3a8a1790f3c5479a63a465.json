{"ast":null,"code":"import _classCallCheck from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { InvalidStateError } from '@stacks/common';\nvar SESSION_VERSION = '1.0.0';\nexport var SessionData = /*#__PURE__*/function () {\n  function SessionData(options) {\n    _classCallCheck(this, SessionData);\n    this.version = SESSION_VERSION;\n    this.userData = options.userData;\n    this.transitKey = options.transitKey;\n    this.etags = options.etags ? options.etags : {};\n  }\n  _createClass(SessionData, [{\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this);\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (json.version !== SESSION_VERSION) {\n        throw new InvalidStateError(\"JSON data version \".concat(json.version, \" not supported by SessionData\"));\n      }\n      var options = {\n        coreNode: json.coreNode,\n        userData: json.userData,\n        transitKey: json.transitKey,\n        etags: json.etags\n      };\n      return new SessionData(options);\n    }\n  }]);\n  return SessionData;\n}();","map":{"version":3,"names":["InvalidStateError","SESSION_VERSION","SessionData","options","_classCallCheck","version","userData","transitKey","etags","_createClass","key","value","toString","JSON","stringify","fromJSON","json","concat","coreNode"],"sources":["C:\\Users\\rajde\\gitrep\\deploy\\frontend\\node_modules\\@stacks\\auth\\src\\sessionData.ts"],"sourcesContent":["import { InvalidStateError } from '@stacks/common';\nimport { UserData } from './userData';\n\nconst SESSION_VERSION = '1.0.0';\n\ntype EtagMap = { [key: string]: string };\n\nexport interface SessionOptions {\n  coreNode?: string;\n  userData?: UserData;\n  transitKey?: string;\n  etags?: EtagMap;\n  localStorageKey?: string;\n  storeOptions?: {\n    localStorageKey?: string;\n  };\n}\n\n/**\n * @ignore\n */\nexport class SessionData {\n  version: string;\n\n  transitKey?: string;\n\n  // using this in place of\n  // window.localStorage.setItem(BLOCKSTACK_STORAGE_LABEL, JSON.stringify(userData))\n  userData?: UserData;\n\n  etags?: EtagMap;\n\n  constructor(options: SessionOptions) {\n    this.version = SESSION_VERSION;\n    this.userData = options.userData;\n    this.transitKey = options.transitKey;\n    this.etags = options.etags ? options.etags : {};\n  }\n\n  // getGaiaHubConfig(): GaiaHubConfig {\n  //   return this.userData && this.userData.gaiaHubConfig\n  // }\n\n  // setGaiaHubConfig(config: GaiaHubConfig): void {\n  //   this.userData.gaiaHubConfig = config\n  // }\n\n  static fromJSON(json: any): SessionData {\n    if (json.version !== SESSION_VERSION) {\n      throw new InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);\n    }\n    const options: SessionOptions = {\n      coreNode: json.coreNode,\n      userData: json.userData,\n      transitKey: json.transitKey,\n      etags: json.etags,\n    };\n    return new SessionData(options);\n  }\n\n  toString(): string {\n    return JSON.stringify(this);\n  }\n}\n"],"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,gBAAgB;AAGlD,IAAMC,eAAe,GAAG,OAAO;AAkB/B,WAAaC,WAAW;EAWtB,SAAAA,YAAYC,OAAuB;IAAAC,eAAA,OAAAF,WAAA;IACjC,IAAI,CAACG,OAAO,GAAGJ,eAAe;IAC9B,IAAI,CAACK,QAAQ,GAAGH,OAAO,CAACG,QAAQ;IAChC,IAAI,CAACC,UAAU,GAAGJ,OAAO,CAACI,UAAU;IACpC,IAAI,CAACC,KAAK,GAAGL,OAAO,CAACK,KAAK,GAAGL,OAAO,CAACK,KAAK,GAAG,EAAE;EACjD;EAACC,YAAA,CAAAP,WAAA;IAAAQ,GAAA;IAAAC,KAAA,EAuBD,SAAAC,SAAA,EAAQ;MACN,OAAOC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC;IAC7B;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAfD,SAAAI,SAAgBC,IAAS;MACvB,IAAIA,IAAI,CAACX,OAAO,KAAKJ,eAAe,EAAE;QACpC,MAAM,IAAID,iBAAiB,sBAAAiB,MAAA,CAAsBD,IAAI,CAACX,OAAO,kCAA+B,CAAC;;MAE/F,IAAMF,OAAO,GAAmB;QAC9Be,QAAQ,EAAEF,IAAI,CAACE,QAAQ;QACvBZ,QAAQ,EAAEU,IAAI,CAACV,QAAQ;QACvBC,UAAU,EAAES,IAAI,CAACT,UAAU;QAC3BC,KAAK,EAAEQ,IAAI,CAACR;OACb;MACD,OAAO,IAAIN,WAAW,CAACC,OAAO,CAAC;IACjC;EAAC;EAAA,OAAAD,WAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}