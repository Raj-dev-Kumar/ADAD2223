{"ast":null,"code":"import _slicedToArray from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { cloneDeep } from './utils';\nimport { uintCV, intCV, contractPrincipalCV, standardPrincipalCV, noneCV, bufferCV, falseCV, trueCV, ClarityType, getCVTypeString, bufferCVFromString } from './clarity';\nimport { NotImplementedError } from './errors';\nimport { stringAsciiCV, stringUtf8CV } from './clarity/types/stringCV';\nimport { utf8ToBytes } from '@stacks/common';\nexport var ClarityAbiTypeId;\n(function (ClarityAbiTypeId) {\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeUInt128\"] = 1] = \"ClarityAbiTypeUInt128\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeInt128\"] = 2] = \"ClarityAbiTypeInt128\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeBool\"] = 3] = \"ClarityAbiTypeBool\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypePrincipal\"] = 4] = \"ClarityAbiTypePrincipal\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeNone\"] = 5] = \"ClarityAbiTypeNone\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeBuffer\"] = 6] = \"ClarityAbiTypeBuffer\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeResponse\"] = 7] = \"ClarityAbiTypeResponse\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeOptional\"] = 8] = \"ClarityAbiTypeOptional\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeTuple\"] = 9] = \"ClarityAbiTypeTuple\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeList\"] = 10] = \"ClarityAbiTypeList\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeStringAscii\"] = 11] = \"ClarityAbiTypeStringAscii\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeStringUtf8\"] = 12] = \"ClarityAbiTypeStringUtf8\";\n  ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeTraitReference\"] = 13] = \"ClarityAbiTypeTraitReference\";\n})(ClarityAbiTypeId || (ClarityAbiTypeId = {}));\nexport var isClarityAbiPrimitive = function isClarityAbiPrimitive(val) {\n  return typeof val === 'string';\n};\nexport var isClarityAbiBuffer = function isClarityAbiBuffer(val) {\n  return val.buffer !== undefined;\n};\nexport var isClarityAbiStringAscii = function isClarityAbiStringAscii(val) {\n  return val['string-ascii'] !== undefined;\n};\nexport var isClarityAbiStringUtf8 = function isClarityAbiStringUtf8(val) {\n  return val['string-utf8'] !== undefined;\n};\nexport var isClarityAbiResponse = function isClarityAbiResponse(val) {\n  return val.response !== undefined;\n};\nexport var isClarityAbiOptional = function isClarityAbiOptional(val) {\n  return val.optional !== undefined;\n};\nexport var isClarityAbiTuple = function isClarityAbiTuple(val) {\n  return val.tuple !== undefined;\n};\nexport var isClarityAbiList = function isClarityAbiList(val) {\n  return val.list !== undefined;\n};\nexport function getTypeUnion(val) {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'uint128') {\n      return {\n        id: ClarityAbiTypeId.ClarityAbiTypeUInt128,\n        type: val\n      };\n    } else if (val === 'int128') {\n      return {\n        id: ClarityAbiTypeId.ClarityAbiTypeInt128,\n        type: val\n      };\n    } else if (val === 'bool') {\n      return {\n        id: ClarityAbiTypeId.ClarityAbiTypeBool,\n        type: val\n      };\n    } else if (val === 'principal') {\n      return {\n        id: ClarityAbiTypeId.ClarityAbiTypePrincipal,\n        type: val\n      };\n    } else if (val === 'trait_reference') {\n      return {\n        id: ClarityAbiTypeId.ClarityAbiTypeTraitReference,\n        type: val\n      };\n    } else if (val === 'none') {\n      return {\n        id: ClarityAbiTypeId.ClarityAbiTypeNone,\n        type: val\n      };\n    } else {\n      throw new Error(\"Unexpected Clarity ABI type primitive: \".concat(JSON.stringify(val)));\n    }\n  } else if (isClarityAbiBuffer(val)) {\n    return {\n      id: ClarityAbiTypeId.ClarityAbiTypeBuffer,\n      type: val\n    };\n  } else if (isClarityAbiResponse(val)) {\n    return {\n      id: ClarityAbiTypeId.ClarityAbiTypeResponse,\n      type: val\n    };\n  } else if (isClarityAbiOptional(val)) {\n    return {\n      id: ClarityAbiTypeId.ClarityAbiTypeOptional,\n      type: val\n    };\n  } else if (isClarityAbiTuple(val)) {\n    return {\n      id: ClarityAbiTypeId.ClarityAbiTypeTuple,\n      type: val\n    };\n  } else if (isClarityAbiList(val)) {\n    return {\n      id: ClarityAbiTypeId.ClarityAbiTypeList,\n      type: val\n    };\n  } else if (isClarityAbiStringAscii(val)) {\n    return {\n      id: ClarityAbiTypeId.ClarityAbiTypeStringAscii,\n      type: val\n    };\n  } else if (isClarityAbiStringUtf8(val)) {\n    return {\n      id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8,\n      type: val\n    };\n  } else {\n    throw new Error(\"Unexpected Clarity ABI type: \".concat(JSON.stringify(val)));\n  }\n}\nfunction encodeClarityValue(input, val) {\n  var union;\n  if (input.id !== undefined) {\n    union = input;\n  } else {\n    union = getTypeUnion(input);\n  }\n  switch (union.id) {\n    case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n      return uintCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeInt128:\n      return intCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeBool:\n      if (val === 'false' || val === '0') return falseCV();else if (val === 'true' || val === '1') return trueCV();else throw new Error(\"Unexpected Clarity bool value: \".concat(JSON.stringify(val)));\n    case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n      if (val.includes('.')) {\n        var _val$split = val.split('.'),\n          _val$split2 = _slicedToArray(_val$split, 2),\n          _addr = _val$split2[0],\n          _name = _val$split2[1];\n        return contractPrincipalCV(_addr, _name);\n      } else {\n        return standardPrincipalCV(val);\n      }\n    case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n      var _val$split3 = val.split('.'),\n        _val$split4 = _slicedToArray(_val$split3, 2),\n        addr = _val$split4[0],\n        name = _val$split4[1];\n      return contractPrincipalCV(addr, name);\n    case ClarityAbiTypeId.ClarityAbiTypeNone:\n      return noneCV();\n    case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n      return bufferCV(utf8ToBytes(val));\n    case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n      return stringAsciiCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n      return stringUtf8CV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeResponse:\n      throw new NotImplementedError(\"Unsupported encoding for Clarity type: \".concat(union.id));\n    case ClarityAbiTypeId.ClarityAbiTypeOptional:\n      throw new NotImplementedError(\"Unsupported encoding for Clarity type: \".concat(union.id));\n    case ClarityAbiTypeId.ClarityAbiTypeTuple:\n      throw new NotImplementedError(\"Unsupported encoding for Clarity type: \".concat(union.id));\n    case ClarityAbiTypeId.ClarityAbiTypeList:\n      throw new NotImplementedError(\"Unsupported encoding for Clarity type: \".concat(union.id));\n    default:\n      throw new Error(\"Unexpected Clarity type ID: \".concat(JSON.stringify(union)));\n  }\n}\nexport { encodeClarityValue };\nexport function getTypeString(val) {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'int128') {\n      return 'int';\n    } else if (val === 'uint128') {\n      return 'uint';\n    }\n    return val;\n  } else if (isClarityAbiBuffer(val)) {\n    return \"(buff \".concat(val.buffer.length, \")\");\n  } else if (isClarityAbiStringAscii(val)) {\n    return \"(string-ascii \".concat(val['string-ascii'].length, \")\");\n  } else if (isClarityAbiStringUtf8(val)) {\n    return \"(string-utf8 \".concat(val['string-utf8'].length, \")\");\n  } else if (isClarityAbiResponse(val)) {\n    return \"(response \".concat(getTypeString(val.response.ok), \" \").concat(getTypeString(val.response.error), \")\");\n  } else if (isClarityAbiOptional(val)) {\n    return \"(optional \".concat(getTypeString(val.optional), \")\");\n  } else if (isClarityAbiTuple(val)) {\n    return \"(tuple \".concat(val.tuple.map(function (t) {\n      return \"(\".concat(t.name, \" \").concat(getTypeString(t.type), \")\");\n    }).join(' '), \")\");\n  } else if (isClarityAbiList(val)) {\n    return \"(list \".concat(val.list.length, \" \").concat(getTypeString(val.list.type), \")\");\n  } else {\n    throw new Error(\"Type string unsupported for Clarity type: \".concat(JSON.stringify(val)));\n  }\n}\nexport function abiFunctionToString(func) {\n  var access = func.access === 'read_only' ? 'read-only' : func.access;\n  return \"(define-\".concat(access, \" (\").concat(func.name, \" \").concat(func.args.map(function (arg) {\n    return \"(\".concat(arg.name, \" \").concat(getTypeString(arg.type), \")\");\n  }).join(' '), \"))\");\n}\nfunction matchType(cv, abiType) {\n  var union = getTypeUnion(abiType);\n  switch (cv.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n    case ClarityType.Int:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n    case ClarityType.UInt:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n    case ClarityType.Buffer:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer && union.type.buffer.length >= cv.buffer.length;\n    case ClarityType.StringASCII:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii && union.type['string-ascii'].length >= cv.data.length;\n    case ClarityType.StringUTF8:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 && union.type['string-utf8'].length >= cv.data.length;\n    case ClarityType.OptionalNone:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeNone || union.id === ClarityAbiTypeId.ClarityAbiTypeOptional;\n    case ClarityType.OptionalSome:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeOptional && matchType(cv.value, union.type.optional);\n    case ClarityType.ResponseErr:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeResponse && matchType(cv.value, union.type.response.error);\n    case ClarityType.ResponseOk:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeResponse && matchType(cv.value, union.type.response.ok);\n    case ClarityType.PrincipalContract:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal || union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference;\n    case ClarityType.PrincipalStandard:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n    case ClarityType.List:\n      return union.id == ClarityAbiTypeId.ClarityAbiTypeList && union.type.list.length >= cv.list.length && cv.list.every(function (val) {\n        return matchType(val, union.type.list.type);\n      });\n    case ClarityType.Tuple:\n      if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n        var tuple = cloneDeep(cv.data);\n        for (var i = 0; i < union.type.tuple.length; i++) {\n          var abiTupleEntry = union.type.tuple[i];\n          var key = abiTupleEntry.name;\n          var val = tuple[key];\n          if (val) {\n            if (!matchType(val, abiTupleEntry.type)) {\n              return false;\n            }\n            delete tuple[key];\n          } else {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n}\nexport function validateContractCall(payload, abi) {\n  var filtered = abi.functions.filter(function (fn) {\n    return fn.name === payload.functionName.content;\n  });\n  if (filtered.length === 1) {\n    var abiFunc = filtered[0];\n    var abiArgs = abiFunc.args;\n    if (payload.functionArgs.length !== abiArgs.length) {\n      throw new Error(\"Clarity function expects \".concat(abiArgs.length, \" argument(s) but received \").concat(payload.functionArgs.length));\n    }\n    for (var i = 0; i < payload.functionArgs.length; i++) {\n      var payloadArg = payload.functionArgs[i];\n      var abiArg = abiArgs[i];\n      if (!matchType(payloadArg, abiArg.type)) {\n        var argNum = i + 1;\n        throw new Error(\"Clarity function `\".concat(payload.functionName.content, \"` expects argument \").concat(argNum, \" to be of type \").concat(getTypeString(abiArg.type), \", not \").concat(getCVTypeString(payloadArg)));\n      }\n    }\n    return true;\n  } else if (filtered.length === 0) {\n    throw new Error(\"ABI doesn't contain a function with the name \".concat(payload.functionName.content));\n  } else {\n    throw new Error(\"Malformed ABI. Contains multiple functions with the name \".concat(payload.functionName.content));\n  }\n}\nexport function parseToCV(input, type) {\n  var typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return uintCV(input);\n    } else if (type === 'int128') {\n      return intCV(input);\n    } else if (type === 'bool') {\n      if (input.toLowerCase() === 'true') {\n        return trueCV();\n      } else if (input.toLowerCase() === 'false') {\n        return falseCV();\n      } else {\n        throw new Error(\"Invalid bool value: \".concat(input));\n      }\n    } else if (type === 'principal') {\n      if (input.includes('.')) {\n        var _input$split = input.split('.'),\n          _input$split2 = _slicedToArray(_input$split, 2),\n          address = _input$split2[0],\n          contractName = _input$split2[1];\n        return contractPrincipalCV(address, contractName);\n      } else {\n        return standardPrincipalCV(input);\n      }\n    } else {\n      throw new Error(\"Contract function contains unsupported Clarity ABI type: \".concat(typeString));\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    var inputLength = utf8ToBytes(input).byteLength;\n    if (inputLength > type.buffer.length) {\n      throw new Error(\"Input exceeds specified buffer length limit of \".concat(type.buffer.length));\n    }\n    return bufferCVFromString(input);\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(\"Contract function contains unsupported Clarity ABI type: \".concat(typeString));\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(\"Contract function contains unsupported Clarity ABI type: \".concat(typeString));\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(\"Contract function contains unsupported Clarity ABI type: \".concat(typeString));\n  } else if (isClarityAbiList(type)) {\n    throw new Error(\"Contract function contains unsupported Clarity ABI type: \".concat(typeString));\n  } else {\n    throw new Error(\"Contract function contains unsupported Clarity ABI type: \".concat(typeString));\n  }\n}","map":{"version":3,"names":["cloneDeep","uintCV","intCV","contractPrincipalCV","standardPrincipalCV","noneCV","bufferCV","falseCV","trueCV","ClarityType","getCVTypeString","bufferCVFromString","NotImplementedError","stringAsciiCV","stringUtf8CV","utf8ToBytes","ClarityAbiTypeId","isClarityAbiPrimitive","val","isClarityAbiBuffer","buffer","undefined","isClarityAbiStringAscii","isClarityAbiStringUtf8","isClarityAbiResponse","response","isClarityAbiOptional","optional","isClarityAbiTuple","tuple","isClarityAbiList","list","getTypeUnion","id","ClarityAbiTypeUInt128","type","ClarityAbiTypeInt128","ClarityAbiTypeBool","ClarityAbiTypePrincipal","ClarityAbiTypeTraitReference","ClarityAbiTypeNone","Error","concat","JSON","stringify","ClarityAbiTypeBuffer","ClarityAbiTypeResponse","ClarityAbiTypeOptional","ClarityAbiTypeTuple","ClarityAbiTypeList","ClarityAbiTypeStringAscii","ClarityAbiTypeStringUtf8","encodeClarityValue","input","union","includes","_val$split","split","_val$split2","_slicedToArray","addr","name","_val$split3","_val$split4","getTypeString","length","ok","error","map","t","join","abiFunctionToString","func","access","args","arg","matchType","cv","abiType","BoolTrue","BoolFalse","Int","UInt","Buffer","StringASCII","data","StringUTF8","OptionalNone","OptionalSome","value","ResponseErr","ResponseOk","PrincipalContract","PrincipalStandard","List","every","Tuple","i","abiTupleEntry","key","validateContractCall","payload","abi","filtered","functions","filter","fn","functionName","content","abiFunc","abiArgs","functionArgs","payloadArg","abiArg","argNum","parseToCV","typeString","toLowerCase","_input$split","_input$split2","address","contractName","inputLength","byteLength"],"sources":["C:\\Users\\rajde\\gitrep\\deploy\\frontend\\node_modules\\@stacks\\transactions\\src\\contract-abi.ts"],"sourcesContent":["import { cloneDeep } from './utils';\nimport {\n  ClarityValue,\n  uintCV,\n  intCV,\n  contractPrincipalCV,\n  standardPrincipalCV,\n  noneCV,\n  bufferCV,\n  falseCV,\n  trueCV,\n  ClarityType,\n  getCVTypeString,\n  bufferCVFromString,\n} from './clarity';\nimport { ContractCallPayload } from './payload';\nimport { NotImplementedError } from './errors';\nimport { stringAsciiCV, stringUtf8CV } from './clarity/types/stringCV';\nimport { utf8ToBytes } from '@stacks/common';\n\n// From https://github.com/blockstack/stacks-blockchain-sidecar/blob/master/src/event-stream/contract-abi.ts\n\nexport type ClarityAbiTypeBuffer = { buffer: { length: number } };\nexport type ClarityAbiTypeStringAscii = { 'string-ascii': { length: number } };\nexport type ClarityAbiTypeStringUtf8 = { 'string-utf8': { length: number } };\nexport type ClarityAbiTypeResponse = { response: { ok: ClarityAbiType; error: ClarityAbiType } };\nexport type ClarityAbiTypeOptional = { optional: ClarityAbiType };\nexport type ClarityAbiTypeTuple = { tuple: { name: string; type: ClarityAbiType }[] };\nexport type ClarityAbiTypeList = { list: { type: ClarityAbiType; length: number } };\n\nexport type ClarityAbiTypeUInt128 = 'uint128';\nexport type ClarityAbiTypeInt128 = 'int128';\nexport type ClarityAbiTypeBool = 'bool';\nexport type ClarityAbiTypePrincipal = 'principal';\nexport type ClarityAbiTypeTraitReference = 'trait_reference';\nexport type ClarityAbiTypeNone = 'none';\n\nexport type ClarityAbiTypePrimitive =\n  | ClarityAbiTypeUInt128\n  | ClarityAbiTypeInt128\n  | ClarityAbiTypeBool\n  | ClarityAbiTypePrincipal\n  | ClarityAbiTypeTraitReference\n  | ClarityAbiTypeNone;\n\nexport type ClarityAbiType =\n  | ClarityAbiTypePrimitive\n  | ClarityAbiTypeBuffer\n  | ClarityAbiTypeResponse\n  | ClarityAbiTypeOptional\n  | ClarityAbiTypeTuple\n  | ClarityAbiTypeList\n  | ClarityAbiTypeStringAscii\n  | ClarityAbiTypeStringUtf8\n  | ClarityAbiTypeTraitReference;\n\nexport enum ClarityAbiTypeId {\n  ClarityAbiTypeUInt128 = 1,\n  ClarityAbiTypeInt128 = 2,\n  ClarityAbiTypeBool = 3,\n  ClarityAbiTypePrincipal = 4,\n  ClarityAbiTypeNone = 5,\n  ClarityAbiTypeBuffer = 6,\n  ClarityAbiTypeResponse = 7,\n  ClarityAbiTypeOptional = 8,\n  ClarityAbiTypeTuple = 9,\n  ClarityAbiTypeList = 10,\n  ClarityAbiTypeStringAscii = 11,\n  ClarityAbiTypeStringUtf8 = 12,\n  ClarityAbiTypeTraitReference = 13,\n}\n\nexport const isClarityAbiPrimitive = (val: ClarityAbiType): val is ClarityAbiTypePrimitive =>\n  typeof val === 'string';\nexport const isClarityAbiBuffer = (val: ClarityAbiType): val is ClarityAbiTypeBuffer =>\n  (val as ClarityAbiTypeBuffer).buffer !== undefined;\nexport const isClarityAbiStringAscii = (val: ClarityAbiType): val is ClarityAbiTypeStringAscii =>\n  (val as ClarityAbiTypeStringAscii)['string-ascii'] !== undefined;\nexport const isClarityAbiStringUtf8 = (val: ClarityAbiType): val is ClarityAbiTypeStringUtf8 =>\n  (val as ClarityAbiTypeStringUtf8)['string-utf8'] !== undefined;\nexport const isClarityAbiResponse = (val: ClarityAbiType): val is ClarityAbiTypeResponse =>\n  (val as ClarityAbiTypeResponse).response !== undefined;\nexport const isClarityAbiOptional = (val: ClarityAbiType): val is ClarityAbiTypeOptional =>\n  (val as ClarityAbiTypeOptional).optional !== undefined;\nexport const isClarityAbiTuple = (val: ClarityAbiType): val is ClarityAbiTypeTuple =>\n  (val as ClarityAbiTypeTuple).tuple !== undefined;\nexport const isClarityAbiList = (val: ClarityAbiType): val is ClarityAbiTypeList =>\n  (val as ClarityAbiTypeList).list !== undefined;\n\nexport type ClarityAbiTypeUnion =\n  | { id: ClarityAbiTypeId.ClarityAbiTypeUInt128; type: ClarityAbiTypeUInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeInt128; type: ClarityAbiTypeInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBool; type: ClarityAbiTypeBool }\n  | { id: ClarityAbiTypeId.ClarityAbiTypePrincipal; type: ClarityAbiTypePrincipal }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference; type: ClarityAbiTypeTraitReference }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeNone; type: ClarityAbiTypeNone }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBuffer; type: ClarityAbiTypeBuffer }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeResponse; type: ClarityAbiTypeResponse }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeOptional; type: ClarityAbiTypeOptional }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTuple; type: ClarityAbiTypeTuple }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeList; type: ClarityAbiTypeList }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii; type: ClarityAbiTypeStringAscii }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8; type: ClarityAbiTypeStringUtf8 };\n\nexport function getTypeUnion(val: ClarityAbiType): ClarityAbiTypeUnion {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'uint128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeUInt128, type: val };\n    } else if (val === 'int128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeInt128, type: val };\n    } else if (val === 'bool') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeBool, type: val };\n    } else if (val === 'principal') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypePrincipal, type: val };\n    } else if (val === 'trait_reference') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference, type: val };\n    } else if (val === 'none') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeNone, type: val };\n    } else {\n      throw new Error(`Unexpected Clarity ABI type primitive: ${JSON.stringify(val)}`);\n    }\n  } else if (isClarityAbiBuffer(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeBuffer, type: val };\n  } else if (isClarityAbiResponse(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeResponse, type: val };\n  } else if (isClarityAbiOptional(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeOptional, type: val };\n  } else if (isClarityAbiTuple(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeTuple, type: val };\n  } else if (isClarityAbiList(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeList, type: val };\n  } else if (isClarityAbiStringAscii(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii, type: val };\n  } else if (isClarityAbiStringUtf8(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8, type: val };\n  } else {\n    throw new Error(`Unexpected Clarity ABI type: ${JSON.stringify(val)}`);\n  }\n}\n\nfunction encodeClarityValue(type: ClarityAbiType, val: string): ClarityValue;\nfunction encodeClarityValue(type: ClarityAbiTypeUnion, val: string): ClarityValue;\nfunction encodeClarityValue(\n  input: ClarityAbiTypeUnion | ClarityAbiType,\n  val: string\n): ClarityValue {\n  let union: ClarityAbiTypeUnion;\n  if ((input as ClarityAbiTypeUnion).id !== undefined) {\n    union = input as ClarityAbiTypeUnion;\n  } else {\n    union = getTypeUnion(input as ClarityAbiType);\n  }\n  switch (union.id) {\n    case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n      return uintCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeInt128:\n      return intCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeBool:\n      if (val === 'false' || val === '0') return falseCV();\n      else if (val === 'true' || val === '1') return trueCV();\n      else throw new Error(`Unexpected Clarity bool value: ${JSON.stringify(val)}`);\n    case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n      if (val.includes('.')) {\n        const [addr, name] = val.split('.');\n        return contractPrincipalCV(addr, name);\n      } else {\n        return standardPrincipalCV(val);\n      }\n    case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n      const [addr, name] = val.split('.');\n      return contractPrincipalCV(addr, name);\n    case ClarityAbiTypeId.ClarityAbiTypeNone:\n      return noneCV();\n    case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n      return bufferCV(utf8ToBytes(val));\n    case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n      return stringAsciiCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n      return stringUtf8CV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeResponse:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeOptional:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeTuple:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeList:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    default:\n      throw new Error(`Unexpected Clarity type ID: ${JSON.stringify(union)}`);\n  }\n}\nexport { encodeClarityValue };\n\nexport function getTypeString(val: ClarityAbiType): string {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'int128') {\n      return 'int';\n    } else if (val === 'uint128') {\n      return 'uint';\n    }\n    return val;\n  } else if (isClarityAbiBuffer(val)) {\n    return `(buff ${val.buffer.length})`;\n  } else if (isClarityAbiStringAscii(val)) {\n    return `(string-ascii ${val['string-ascii'].length})`;\n  } else if (isClarityAbiStringUtf8(val)) {\n    return `(string-utf8 ${val['string-utf8'].length})`;\n  } else if (isClarityAbiResponse(val)) {\n    return `(response ${getTypeString(val.response.ok)} ${getTypeString(val.response.error)})`;\n  } else if (isClarityAbiOptional(val)) {\n    return `(optional ${getTypeString(val.optional)})`;\n  } else if (isClarityAbiTuple(val)) {\n    return `(tuple ${val.tuple.map(t => `(${t.name} ${getTypeString(t.type)})`).join(' ')})`;\n  } else if (isClarityAbiList(val)) {\n    return `(list ${val.list.length} ${getTypeString(val.list.type)})`;\n  } else {\n    throw new Error(`Type string unsupported for Clarity type: ${JSON.stringify(val)}`);\n  }\n}\n\nexport interface ClarityAbiFunction {\n  name: string;\n  access: 'private' | 'public' | 'read_only';\n  args: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  outputs: {\n    type: ClarityAbiType;\n  };\n}\n\nexport function abiFunctionToString(func: ClarityAbiFunction): string {\n  const access = func.access === 'read_only' ? 'read-only' : func.access;\n  return `(define-${access} (${func.name} ${func.args\n    .map(arg => `(${arg.name} ${getTypeString(arg.type)})`)\n    .join(' ')}))`;\n}\n\nexport interface ClarityAbiVariable {\n  name: string;\n  access: 'variable' | 'constant';\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbiMap {\n  name: string;\n  key: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  value: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n}\n\nexport interface ClarityAbiTypeFungibleToken {\n  name: string;\n}\n\nexport interface ClarityAbiTypeNonFungibleToken {\n  name: string;\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbi {\n  functions: ClarityAbiFunction[];\n  variables: ClarityAbiVariable[];\n  maps: ClarityAbiMap[];\n  fungible_tokens: ClarityAbiTypeFungibleToken[];\n  non_fungible_tokens: ClarityAbiTypeNonFungibleToken[];\n}\n\nfunction matchType(cv: ClarityValue, abiType: ClarityAbiType): boolean {\n  const union = getTypeUnion(abiType);\n\n  switch (cv.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n    case ClarityType.Int:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n    case ClarityType.UInt:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n    case ClarityType.Buffer:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer &&\n        union.type.buffer.length >= cv.buffer.length\n      );\n    case ClarityType.StringASCII:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii &&\n        union.type['string-ascii'].length >= cv.data.length\n      );\n    case ClarityType.StringUTF8:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 &&\n        union.type['string-utf8'].length >= cv.data.length\n      );\n    case ClarityType.OptionalNone:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeNone ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional\n      );\n    case ClarityType.OptionalSome:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional &&\n        matchType(cv.value, union.type.optional)\n      );\n    case ClarityType.ResponseErr:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.error)\n      );\n    case ClarityType.ResponseOk:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.ok)\n      );\n    case ClarityType.PrincipalContract:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference\n      );\n    case ClarityType.PrincipalStandard:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n    case ClarityType.List:\n      return (\n        union.id == ClarityAbiTypeId.ClarityAbiTypeList &&\n        union.type.list.length >= cv.list.length &&\n        cv.list.every(val => matchType(val, union.type.list.type))\n      );\n    case ClarityType.Tuple:\n      if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n        const tuple = cloneDeep(cv.data);\n        for (let i = 0; i < union.type.tuple.length; i++) {\n          const abiTupleEntry = union.type.tuple[i];\n          const key = abiTupleEntry.name;\n          const val = tuple[key];\n\n          // if key exists in cv tuple, check if its type matches the abi\n          // return false if key doesn't exist\n          if (val) {\n            if (!matchType(val, abiTupleEntry.type)) {\n              return false;\n            }\n            delete tuple[key];\n          } else {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n}\n\n/**\n * Validates a contract-call payload with a contract ABI\n *\n * @param {ContractCallPayload} payload - a contract-call payload\n * @param {ClarityAbi} abi - a contract ABI\n *\n * @returns {boolean} true if the payloads functionArgs type check against those in the ABI\n */\nexport function validateContractCall(payload: ContractCallPayload, abi: ClarityAbi): boolean {\n  const filtered = abi.functions.filter(fn => fn.name === payload.functionName.content);\n  if (filtered.length === 1) {\n    const abiFunc = filtered[0];\n    const abiArgs = abiFunc.args;\n\n    if (payload.functionArgs.length !== abiArgs.length) {\n      throw new Error(\n        `Clarity function expects ${abiArgs.length} argument(s) but received ${payload.functionArgs.length}`\n      );\n    }\n\n    for (let i = 0; i < payload.functionArgs.length; i++) {\n      const payloadArg = payload.functionArgs[i];\n      const abiArg = abiArgs[i];\n\n      if (!matchType(payloadArg, abiArg.type)) {\n        const argNum = i + 1;\n        throw new Error(\n          `Clarity function \\`${\n            payload.functionName.content\n          }\\` expects argument ${argNum} to be of type ${getTypeString(\n            abiArg.type\n          )}, not ${getCVTypeString(payloadArg)}`\n        );\n      }\n    }\n\n    return true;\n  } else if (filtered.length === 0) {\n    throw new Error(`ABI doesn't contain a function with the name ${payload.functionName.content}`);\n  } else {\n    throw new Error(\n      `Malformed ABI. Contains multiple functions with the name ${payload.functionName.content}`\n    );\n  }\n}\n\n/**\n * Convert string input to Clarity value based on contract ABI data. Only handles Clarity\n * primitives and buffers. Responses, optionals, tuples and lists are not supported.\n *\n * @param {string} input - string to be parsed into Clarity value\n * @param {ClarityAbiType} type - the contract function argument object\n *\n * @returns {ClarityValue} returns a Clarity value\n */\nexport function parseToCV(input: string, type: ClarityAbiType): ClarityValue {\n  const typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return uintCV(input);\n    } else if (type === 'int128') {\n      return intCV(input);\n    } else if (type === 'bool') {\n      if (input.toLowerCase() === 'true') {\n        return trueCV();\n      } else if (input.toLowerCase() === 'false') {\n        return falseCV();\n      } else {\n        throw new Error(`Invalid bool value: ${input}`);\n      }\n    } else if (type === 'principal') {\n      if (input.includes('.')) {\n        const [address, contractName] = input.split('.');\n        return contractPrincipalCV(address, contractName);\n      } else {\n        return standardPrincipalCV(input);\n      }\n    } else {\n      throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    const inputLength = utf8ToBytes(input).byteLength;\n    if (inputLength > type.buffer.length) {\n      throw new Error(`Input exceeds specified buffer length limit of ${type.buffer.length}`);\n    }\n    return bufferCVFromString(input);\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiList(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,SAAS;AACnC,SAEEC,MAAM,EACNC,KAAK,EACLC,mBAAmB,EACnBC,mBAAmB,EACnBC,MAAM,EACNC,QAAQ,EACRC,OAAO,EACPC,MAAM,EACNC,WAAW,EACXC,eAAe,EACfC,kBAAkB,QACb,WAAW;AAElB,SAASC,mBAAmB,QAAQ,UAAU;AAC9C,SAASC,aAAa,EAAEC,YAAY,QAAQ,0BAA0B;AACtE,SAASC,WAAW,QAAQ,gBAAgB;AAsC5C,WAAYC,gBAcX;AAdD,WAAYA,gBAAgB;EAC1BA,gBAAA,CAAAA,gBAAA,wDAAyB;EACzBA,gBAAA,CAAAA,gBAAA,sDAAwB;EACxBA,gBAAA,CAAAA,gBAAA,kDAAsB;EACtBA,gBAAA,CAAAA,gBAAA,4DAA2B;EAC3BA,gBAAA,CAAAA,gBAAA,kDAAsB;EACtBA,gBAAA,CAAAA,gBAAA,sDAAwB;EACxBA,gBAAA,CAAAA,gBAAA,0DAA0B;EAC1BA,gBAAA,CAAAA,gBAAA,0DAA0B;EAC1BA,gBAAA,CAAAA,gBAAA,oDAAuB;EACvBA,gBAAA,CAAAA,gBAAA,mDAAuB;EACvBA,gBAAA,CAAAA,gBAAA,iEAA8B;EAC9BA,gBAAA,CAAAA,gBAAA,+DAA6B;EAC7BA,gBAAA,CAAAA,gBAAA,uEAAiC;AACnC,CAAC,EAdWA,gBAAgB,KAAhBA,gBAAgB;AAgB5B,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,GAAmB;EAAA,OACvD,OAAOA,GAAG,KAAK,QAAQ;AAAA;AACzB,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAID,GAAmB;EAAA,OACnDA,GAA4B,CAACE,MAAM,KAAKC,SAAS;AAAA;AACpD,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAIJ,GAAmB;EAAA,OACxDA,GAAiC,CAAC,cAAc,CAAC,KAAKG,SAAS;AAAA;AAClE,OAAO,IAAME,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIL,GAAmB;EAAA,OACvDA,GAAgC,CAAC,aAAa,CAAC,KAAKG,SAAS;AAAA;AAChE,OAAO,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIN,GAAmB;EAAA,OACrDA,GAA8B,CAACO,QAAQ,KAAKJ,SAAS;AAAA;AACxD,OAAO,IAAMK,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIR,GAAmB;EAAA,OACrDA,GAA8B,CAACS,QAAQ,KAAKN,SAAS;AAAA;AACxD,OAAO,IAAMO,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIV,GAAmB;EAAA,OAClDA,GAA2B,CAACW,KAAK,KAAKR,SAAS;AAAA;AAClD,OAAO,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIZ,GAAmB;EAAA,OACjDA,GAA0B,CAACa,IAAI,KAAKV,SAAS;AAAA;AAiBhD,OAAM,SAAUW,YAAYA,CAACd,GAAmB;EAC9C,IAAID,qBAAqB,CAACC,GAAG,CAAC,EAAE;IAC9B,IAAIA,GAAG,KAAK,SAAS,EAAE;MACrB,OAAO;QAAEe,EAAE,EAAEjB,gBAAgB,CAACkB,qBAAqB;QAAEC,IAAI,EAAEjB;MAAG,CAAE;KACjE,MAAM,IAAIA,GAAG,KAAK,QAAQ,EAAE;MAC3B,OAAO;QAAEe,EAAE,EAAEjB,gBAAgB,CAACoB,oBAAoB;QAAED,IAAI,EAAEjB;MAAG,CAAE;KAChE,MAAM,IAAIA,GAAG,KAAK,MAAM,EAAE;MACzB,OAAO;QAAEe,EAAE,EAAEjB,gBAAgB,CAACqB,kBAAkB;QAAEF,IAAI,EAAEjB;MAAG,CAAE;KAC9D,MAAM,IAAIA,GAAG,KAAK,WAAW,EAAE;MAC9B,OAAO;QAAEe,EAAE,EAAEjB,gBAAgB,CAACsB,uBAAuB;QAAEH,IAAI,EAAEjB;MAAG,CAAE;KACnE,MAAM,IAAIA,GAAG,KAAK,iBAAiB,EAAE;MACpC,OAAO;QAAEe,EAAE,EAAEjB,gBAAgB,CAACuB,4BAA4B;QAAEJ,IAAI,EAAEjB;MAAG,CAAE;KACxE,MAAM,IAAIA,GAAG,KAAK,MAAM,EAAE;MACzB,OAAO;QAAEe,EAAE,EAAEjB,gBAAgB,CAACwB,kBAAkB;QAAEL,IAAI,EAAEjB;MAAG,CAAE;KAC9D,MAAM;MACL,MAAM,IAAIuB,KAAK,2CAAAC,MAAA,CAA2CC,IAAI,CAACC,SAAS,CAAC1B,GAAG,CAAC,CAAE,CAAC;;GAEnF,MAAM,IAAIC,kBAAkB,CAACD,GAAG,CAAC,EAAE;IAClC,OAAO;MAAEe,EAAE,EAAEjB,gBAAgB,CAAC6B,oBAAoB;MAAEV,IAAI,EAAEjB;IAAG,CAAE;GAChE,MAAM,IAAIM,oBAAoB,CAACN,GAAG,CAAC,EAAE;IACpC,OAAO;MAAEe,EAAE,EAAEjB,gBAAgB,CAAC8B,sBAAsB;MAAEX,IAAI,EAAEjB;IAAG,CAAE;GAClE,MAAM,IAAIQ,oBAAoB,CAACR,GAAG,CAAC,EAAE;IACpC,OAAO;MAAEe,EAAE,EAAEjB,gBAAgB,CAAC+B,sBAAsB;MAAEZ,IAAI,EAAEjB;IAAG,CAAE;GAClE,MAAM,IAAIU,iBAAiB,CAACV,GAAG,CAAC,EAAE;IACjC,OAAO;MAAEe,EAAE,EAAEjB,gBAAgB,CAACgC,mBAAmB;MAAEb,IAAI,EAAEjB;IAAG,CAAE;GAC/D,MAAM,IAAIY,gBAAgB,CAACZ,GAAG,CAAC,EAAE;IAChC,OAAO;MAAEe,EAAE,EAAEjB,gBAAgB,CAACiC,kBAAkB;MAAEd,IAAI,EAAEjB;IAAG,CAAE;GAC9D,MAAM,IAAII,uBAAuB,CAACJ,GAAG,CAAC,EAAE;IACvC,OAAO;MAAEe,EAAE,EAAEjB,gBAAgB,CAACkC,yBAAyB;MAAEf,IAAI,EAAEjB;IAAG,CAAE;GACrE,MAAM,IAAIK,sBAAsB,CAACL,GAAG,CAAC,EAAE;IACtC,OAAO;MAAEe,EAAE,EAAEjB,gBAAgB,CAACmC,wBAAwB;MAAEhB,IAAI,EAAEjB;IAAG,CAAE;GACpE,MAAM;IACL,MAAM,IAAIuB,KAAK,iCAAAC,MAAA,CAAiCC,IAAI,CAACC,SAAS,CAAC1B,GAAG,CAAC,CAAE,CAAC;;AAE1E;AAIA,SAASkC,kBAAkBA,CACzBC,KAA2C,EAC3CnC,GAAW;EAEX,IAAIoC,KAA0B;EAC9B,IAAKD,KAA6B,CAACpB,EAAE,KAAKZ,SAAS,EAAE;IACnDiC,KAAK,GAAGD,KAA4B;GACrC,MAAM;IACLC,KAAK,GAAGtB,YAAY,CAACqB,KAAuB,CAAC;;EAE/C,QAAQC,KAAK,CAACrB,EAAE;IACd,KAAKjB,gBAAgB,CAACkB,qBAAqB;MACzC,OAAOjC,MAAM,CAACiB,GAAG,CAAC;IACpB,KAAKF,gBAAgB,CAACoB,oBAAoB;MACxC,OAAOlC,KAAK,CAACgB,GAAG,CAAC;IACnB,KAAKF,gBAAgB,CAACqB,kBAAkB;MACtC,IAAInB,GAAG,KAAK,OAAO,IAAIA,GAAG,KAAK,GAAG,EAAE,OAAOX,OAAO,EAAE,CAAC,KAChD,IAAIW,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,GAAG,EAAE,OAAOV,MAAM,EAAE,CAAC,KACnD,MAAM,IAAIiC,KAAK,mCAAAC,MAAA,CAAmCC,IAAI,CAACC,SAAS,CAAC1B,GAAG,CAAC,CAAE,CAAC;IAC/E,KAAKF,gBAAgB,CAACsB,uBAAuB;MAC3C,IAAIpB,GAAG,CAACqC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACrB,IAAAC,UAAA,GAAqBtC,GAAG,CAACuC,KAAK,CAAC,GAAG,CAAC;UAAAC,WAAA,GAAAC,cAAA,CAAAH,UAAA;UAA5BI,KAAI,GAAAF,WAAA;UAAEG,KAAI,GAAAH,WAAA;QACjB,OAAOvD,mBAAmB,CAACyD,KAAI,EAAEC,KAAI,CAAC;OACvC,MAAM;QACL,OAAOzD,mBAAmB,CAACc,GAAG,CAAC;;IAEnC,KAAKF,gBAAgB,CAACuB,4BAA4B;MAChD,IAAAuB,WAAA,GAAqB5C,GAAG,CAACuC,KAAK,CAAC,GAAG,CAAC;QAAAM,WAAA,GAAAJ,cAAA,CAAAG,WAAA;QAA5BF,IAAI,GAAAG,WAAA;QAAEF,IAAI,GAAAE,WAAA;MACjB,OAAO5D,mBAAmB,CAACyD,IAAI,EAAEC,IAAI,CAAC;IACxC,KAAK7C,gBAAgB,CAACwB,kBAAkB;MACtC,OAAOnC,MAAM,EAAE;IACjB,KAAKW,gBAAgB,CAAC6B,oBAAoB;MACxC,OAAOvC,QAAQ,CAACS,WAAW,CAACG,GAAG,CAAC,CAAC;IACnC,KAAKF,gBAAgB,CAACkC,yBAAyB;MAC7C,OAAOrC,aAAa,CAACK,GAAG,CAAC;IAC3B,KAAKF,gBAAgB,CAACmC,wBAAwB;MAC5C,OAAOrC,YAAY,CAACI,GAAG,CAAC;IAC1B,KAAKF,gBAAgB,CAAC8B,sBAAsB;MAC1C,MAAM,IAAIlC,mBAAmB,2CAAA8B,MAAA,CAA2CY,KAAK,CAACrB,EAAE,CAAE,CAAC;IACrF,KAAKjB,gBAAgB,CAAC+B,sBAAsB;MAC1C,MAAM,IAAInC,mBAAmB,2CAAA8B,MAAA,CAA2CY,KAAK,CAACrB,EAAE,CAAE,CAAC;IACrF,KAAKjB,gBAAgB,CAACgC,mBAAmB;MACvC,MAAM,IAAIpC,mBAAmB,2CAAA8B,MAAA,CAA2CY,KAAK,CAACrB,EAAE,CAAE,CAAC;IACrF,KAAKjB,gBAAgB,CAACiC,kBAAkB;MACtC,MAAM,IAAIrC,mBAAmB,2CAAA8B,MAAA,CAA2CY,KAAK,CAACrB,EAAE,CAAE,CAAC;IACrF;MACE,MAAM,IAAIQ,KAAK,gCAAAC,MAAA,CAAgCC,IAAI,CAACC,SAAS,CAACU,KAAK,CAAC,CAAE,CAAC;;AAE7E;AACA,SAASF,kBAAkB;AAE3B,OAAM,SAAUY,aAAaA,CAAC9C,GAAmB;EAC/C,IAAID,qBAAqB,CAACC,GAAG,CAAC,EAAE;IAC9B,IAAIA,GAAG,KAAK,QAAQ,EAAE;MACpB,OAAO,KAAK;KACb,MAAM,IAAIA,GAAG,KAAK,SAAS,EAAE;MAC5B,OAAO,MAAM;;IAEf,OAAOA,GAAG;GACX,MAAM,IAAIC,kBAAkB,CAACD,GAAG,CAAC,EAAE;IAClC,gBAAAwB,MAAA,CAAgBxB,GAAG,CAACE,MAAM,CAAC6C,MAAM;GAClC,MAAM,IAAI3C,uBAAuB,CAACJ,GAAG,CAAC,EAAE;IACvC,wBAAAwB,MAAA,CAAwBxB,GAAG,CAAC,cAAc,CAAC,CAAC+C,MAAM;GACnD,MAAM,IAAI1C,sBAAsB,CAACL,GAAG,CAAC,EAAE;IACtC,uBAAAwB,MAAA,CAAuBxB,GAAG,CAAC,aAAa,CAAC,CAAC+C,MAAM;GACjD,MAAM,IAAIzC,oBAAoB,CAACN,GAAG,CAAC,EAAE;IACpC,oBAAAwB,MAAA,CAAoBsB,aAAa,CAAC9C,GAAG,CAACO,QAAQ,CAACyC,EAAE,CAAC,OAAAxB,MAAA,CAAIsB,aAAa,CAAC9C,GAAG,CAACO,QAAQ,CAAC0C,KAAK,CAAC;GACxF,MAAM,IAAIzC,oBAAoB,CAACR,GAAG,CAAC,EAAE;IACpC,oBAAAwB,MAAA,CAAoBsB,aAAa,CAAC9C,GAAG,CAACS,QAAQ,CAAC;GAChD,MAAM,IAAIC,iBAAiB,CAACV,GAAG,CAAC,EAAE;IACjC,iBAAAwB,MAAA,CAAiBxB,GAAG,CAACW,KAAK,CAACuC,GAAG,CAAC,UAAAC,CAAC;MAAA,WAAA3B,MAAA,CAAQ2B,CAAC,CAACR,IAAI,OAAAnB,MAAA,CAAIsB,aAAa,CAACK,CAAC,CAAClC,IAAI,CAAC;IAAA,CAAG,CAAC,CAACmC,IAAI,CAAC,GAAG,CAAC;GACtF,MAAM,IAAIxC,gBAAgB,CAACZ,GAAG,CAAC,EAAE;IAChC,gBAAAwB,MAAA,CAAgBxB,GAAG,CAACa,IAAI,CAACkC,MAAM,OAAAvB,MAAA,CAAIsB,aAAa,CAAC9C,GAAG,CAACa,IAAI,CAACI,IAAI,CAAC;GAChE,MAAM;IACL,MAAM,IAAIM,KAAK,8CAAAC,MAAA,CAA8CC,IAAI,CAACC,SAAS,CAAC1B,GAAG,CAAC,CAAE,CAAC;;AAEvF;AAcA,OAAM,SAAUqD,mBAAmBA,CAACC,IAAwB;EAC1D,IAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM,KAAK,WAAW,GAAG,WAAW,GAAGD,IAAI,CAACC,MAAM;EACtE,kBAAA/B,MAAA,CAAkB+B,MAAM,QAAA/B,MAAA,CAAK8B,IAAI,CAACX,IAAI,OAAAnB,MAAA,CAAI8B,IAAI,CAACE,IAAI,CAChDN,GAAG,CAAC,UAAAO,GAAG;IAAA,WAAAjC,MAAA,CAAQiC,GAAG,CAACd,IAAI,OAAAnB,MAAA,CAAIsB,aAAa,CAACW,GAAG,CAACxC,IAAI,CAAC;EAAA,CAAG,CAAC,CACtDmC,IAAI,CAAC,GAAG,CAAC;AACd;AAqCA,SAASM,SAASA,CAACC,EAAgB,EAAEC,OAAuB;EAC1D,IAAMxB,KAAK,GAAGtB,YAAY,CAAC8C,OAAO,CAAC;EAEnC,QAAQD,EAAE,CAAC1C,IAAI;IACb,KAAK1B,WAAW,CAACsE,QAAQ;IACzB,KAAKtE,WAAW,CAACuE,SAAS;MACxB,OAAO1B,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAACqB,kBAAkB;IACzD,KAAK5B,WAAW,CAACwE,GAAG;MAClB,OAAO3B,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAACoB,oBAAoB;IAC3D,KAAK3B,WAAW,CAACyE,IAAI;MACnB,OAAO5B,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAACkB,qBAAqB;IAC5D,KAAKzB,WAAW,CAAC0E,MAAM;MACrB,OACE7B,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAAC6B,oBAAoB,IAClDS,KAAK,CAACnB,IAAI,CAACf,MAAM,CAAC6C,MAAM,IAAIY,EAAE,CAACzD,MAAM,CAAC6C,MAAM;IAEhD,KAAKxD,WAAW,CAAC2E,WAAW;MAC1B,OACE9B,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAACkC,yBAAyB,IACvDI,KAAK,CAACnB,IAAI,CAAC,cAAc,CAAC,CAAC8B,MAAM,IAAIY,EAAE,CAACQ,IAAI,CAACpB,MAAM;IAEvD,KAAKxD,WAAW,CAAC6E,UAAU;MACzB,OACEhC,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAACmC,wBAAwB,IACtDG,KAAK,CAACnB,IAAI,CAAC,aAAa,CAAC,CAAC8B,MAAM,IAAIY,EAAE,CAACQ,IAAI,CAACpB,MAAM;IAEtD,KAAKxD,WAAW,CAAC8E,YAAY;MAC3B,OACEjC,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAACwB,kBAAkB,IAChDc,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAAC+B,sBAAsB;IAExD,KAAKtC,WAAW,CAAC+E,YAAY;MAC3B,OACElC,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAAC+B,sBAAsB,IACpD6B,SAAS,CAACC,EAAE,CAACY,KAAK,EAAEnC,KAAK,CAACnB,IAAI,CAACR,QAAQ,CAAC;IAE5C,KAAKlB,WAAW,CAACiF,WAAW;MAC1B,OACEpC,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAAC8B,sBAAsB,IACpD8B,SAAS,CAACC,EAAE,CAACY,KAAK,EAAEnC,KAAK,CAACnB,IAAI,CAACV,QAAQ,CAAC0C,KAAK,CAAC;IAElD,KAAK1D,WAAW,CAACkF,UAAU;MACzB,OACErC,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAAC8B,sBAAsB,IACpD8B,SAAS,CAACC,EAAE,CAACY,KAAK,EAAEnC,KAAK,CAACnB,IAAI,CAACV,QAAQ,CAACyC,EAAE,CAAC;IAE/C,KAAKzD,WAAW,CAACmF,iBAAiB;MAChC,OACEtC,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAACsB,uBAAuB,IACrDgB,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAACuB,4BAA4B;IAE9D,KAAK9B,WAAW,CAACoF,iBAAiB;MAChC,OAAOvC,KAAK,CAACrB,EAAE,KAAKjB,gBAAgB,CAACsB,uBAAuB;IAC9D,KAAK7B,WAAW,CAACqF,IAAI;MACnB,OACExC,KAAK,CAACrB,EAAE,IAAIjB,gBAAgB,CAACiC,kBAAkB,IAC/CK,KAAK,CAACnB,IAAI,CAACJ,IAAI,CAACkC,MAAM,IAAIY,EAAE,CAAC9C,IAAI,CAACkC,MAAM,IACxCY,EAAE,CAAC9C,IAAI,CAACgE,KAAK,CAAC,UAAA7E,GAAG;QAAA,OAAI0D,SAAS,CAAC1D,GAAG,EAAEoC,KAAK,CAACnB,IAAI,CAACJ,IAAI,CAACI,IAAI,CAAC;MAAA,EAAC;IAE9D,KAAK1B,WAAW,CAACuF,KAAK;MACpB,IAAI1C,KAAK,CAACrB,EAAE,IAAIjB,gBAAgB,CAACgC,mBAAmB,EAAE;QACpD,IAAMnB,KAAK,GAAG7B,SAAS,CAAC6E,EAAE,CAACQ,IAAI,CAAC;QAChC,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3C,KAAK,CAACnB,IAAI,CAACN,KAAK,CAACoC,MAAM,EAAEgC,CAAC,EAAE,EAAE;UAChD,IAAMC,aAAa,GAAG5C,KAAK,CAACnB,IAAI,CAACN,KAAK,CAACoE,CAAC,CAAC;UACzC,IAAME,GAAG,GAAGD,aAAa,CAACrC,IAAI;UAC9B,IAAM3C,GAAG,GAAGW,KAAK,CAACsE,GAAG,CAAC;UAItB,IAAIjF,GAAG,EAAE;YACP,IAAI,CAAC0D,SAAS,CAAC1D,GAAG,EAAEgF,aAAa,CAAC/D,IAAI,CAAC,EAAE;cACvC,OAAO,KAAK;;YAEd,OAAON,KAAK,CAACsE,GAAG,CAAC;WAClB,MAAM;YACL,OAAO,KAAK;;;QAGhB,OAAO,IAAI;OACZ,MAAM;QACL,OAAO,KAAK;;IAEhB;MACE,OAAO,KAAK;;AAElB;AAUA,OAAM,SAAUC,oBAAoBA,CAACC,OAA4B,EAAEC,GAAe;EAChF,IAAMC,QAAQ,GAAGD,GAAG,CAACE,SAAS,CAACC,MAAM,CAAC,UAAAC,EAAE;IAAA,OAAIA,EAAE,CAAC7C,IAAI,KAAKwC,OAAO,CAACM,YAAY,CAACC,OAAO;EAAA,EAAC;EACrF,IAAIL,QAAQ,CAACtC,MAAM,KAAK,CAAC,EAAE;IACzB,IAAM4C,OAAO,GAAGN,QAAQ,CAAC,CAAC,CAAC;IAC3B,IAAMO,OAAO,GAAGD,OAAO,CAACnC,IAAI;IAE5B,IAAI2B,OAAO,CAACU,YAAY,CAAC9C,MAAM,KAAK6C,OAAO,CAAC7C,MAAM,EAAE;MAClD,MAAM,IAAIxB,KAAK,6BAAAC,MAAA,CACeoE,OAAO,CAAC7C,MAAM,gCAAAvB,MAAA,CAA6B2D,OAAO,CAACU,YAAY,CAAC9C,MAAM,CAAE,CACrG;;IAGH,KAAK,IAAIgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,OAAO,CAACU,YAAY,CAAC9C,MAAM,EAAEgC,CAAC,EAAE,EAAE;MACpD,IAAMe,UAAU,GAAGX,OAAO,CAACU,YAAY,CAACd,CAAC,CAAC;MAC1C,IAAMgB,MAAM,GAAGH,OAAO,CAACb,CAAC,CAAC;MAEzB,IAAI,CAACrB,SAAS,CAACoC,UAAU,EAAEC,MAAM,CAAC9E,IAAI,CAAC,EAAE;QACvC,IAAM+E,MAAM,GAAGjB,CAAC,GAAG,CAAC;QACpB,MAAM,IAAIxD,KAAK,sBAAAC,MAAA,CAEX2D,OAAO,CAACM,YAAY,CAACC,OACvB,yBAAAlE,MAAA,CAAuBwE,MAAM,qBAAAxE,MAAA,CAAkBsB,aAAa,CAC1DiD,MAAM,CAAC9E,IAAI,CACZ,YAAAO,MAAA,CAAShC,eAAe,CAACsG,UAAU,CAAC,CAAE,CACxC;;;IAIL,OAAO,IAAI;GACZ,MAAM,IAAIT,QAAQ,CAACtC,MAAM,KAAK,CAAC,EAAE;IAChC,MAAM,IAAIxB,KAAK,iDAAAC,MAAA,CAAiD2D,OAAO,CAACM,YAAY,CAACC,OAAO,CAAE,CAAC;GAChG,MAAM;IACL,MAAM,IAAInE,KAAK,6DAAAC,MAAA,CAC+C2D,OAAO,CAACM,YAAY,CAACC,OAAO,CAAE,CAC3F;;AAEL;AAWA,OAAM,SAAUO,SAASA,CAAC9D,KAAa,EAAElB,IAAoB;EAC3D,IAAMiF,UAAU,GAAGpD,aAAa,CAAC7B,IAAI,CAAC;EACtC,IAAIlB,qBAAqB,CAACkB,IAAI,CAAC,EAAE;IAC/B,IAAIA,IAAI,KAAK,SAAS,EAAE;MACtB,OAAOlC,MAAM,CAACoD,KAAK,CAAC;KACrB,MAAM,IAAIlB,IAAI,KAAK,QAAQ,EAAE;MAC5B,OAAOjC,KAAK,CAACmD,KAAK,CAAC;KACpB,MAAM,IAAIlB,IAAI,KAAK,MAAM,EAAE;MAC1B,IAAIkB,KAAK,CAACgE,WAAW,EAAE,KAAK,MAAM,EAAE;QAClC,OAAO7G,MAAM,EAAE;OAChB,MAAM,IAAI6C,KAAK,CAACgE,WAAW,EAAE,KAAK,OAAO,EAAE;QAC1C,OAAO9G,OAAO,EAAE;OACjB,MAAM;QACL,MAAM,IAAIkC,KAAK,wBAAAC,MAAA,CAAwBW,KAAK,CAAE,CAAC;;KAElD,MAAM,IAAIlB,IAAI,KAAK,WAAW,EAAE;MAC/B,IAAIkB,KAAK,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;QACvB,IAAA+D,YAAA,GAAgCjE,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC;UAAA8D,aAAA,GAAA5D,cAAA,CAAA2D,YAAA;UAAzCE,OAAO,GAAAD,aAAA;UAAEE,YAAY,GAAAF,aAAA;QAC5B,OAAOpH,mBAAmB,CAACqH,OAAO,EAAEC,YAAY,CAAC;OAClD,MAAM;QACL,OAAOrH,mBAAmB,CAACiD,KAAK,CAAC;;KAEpC,MAAM;MACL,MAAM,IAAIZ,KAAK,6DAAAC,MAAA,CAA6D0E,UAAU,CAAE,CAAC;;GAE5F,MAAM,IAAIjG,kBAAkB,CAACgB,IAAI,CAAC,EAAE;IACnC,IAAMuF,WAAW,GAAG3G,WAAW,CAACsC,KAAK,CAAC,CAACsE,UAAU;IACjD,IAAID,WAAW,GAAGvF,IAAI,CAACf,MAAM,CAAC6C,MAAM,EAAE;MACpC,MAAM,IAAIxB,KAAK,mDAAAC,MAAA,CAAmDP,IAAI,CAACf,MAAM,CAAC6C,MAAM,CAAE,CAAC;;IAEzF,OAAOtD,kBAAkB,CAAC0C,KAAK,CAAC;GACjC,MAAM,IAAI7B,oBAAoB,CAACW,IAAI,CAAC,EAAE;IACrC,MAAM,IAAIM,KAAK,6DAAAC,MAAA,CAA6D0E,UAAU,CAAE,CAAC;GAC1F,MAAM,IAAI1F,oBAAoB,CAACS,IAAI,CAAC,EAAE;IACrC,MAAM,IAAIM,KAAK,6DAAAC,MAAA,CAA6D0E,UAAU,CAAE,CAAC;GAC1F,MAAM,IAAIxF,iBAAiB,CAACO,IAAI,CAAC,EAAE;IAClC,MAAM,IAAIM,KAAK,6DAAAC,MAAA,CAA6D0E,UAAU,CAAE,CAAC;GAC1F,MAAM,IAAItF,gBAAgB,CAACK,IAAI,CAAC,EAAE;IACjC,MAAM,IAAIM,KAAK,6DAAAC,MAAA,CAA6D0E,UAAU,CAAE,CAAC;GAC1F,MAAM;IACL,MAAM,IAAI3E,KAAK,6DAAAC,MAAA,CAA6D0E,UAAU,CAAE,CAAC;;AAE7F"},"metadata":{},"sourceType":"module","externalDependencies":[]}