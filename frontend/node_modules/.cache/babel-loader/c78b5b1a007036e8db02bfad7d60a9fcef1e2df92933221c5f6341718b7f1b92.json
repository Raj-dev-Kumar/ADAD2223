{"ast":null,"code":"import { AddressHashMode, AddressVersion, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, StacksMessageType, TransactionVersion } from './constants';\nimport { c32address } from 'c32check';\nimport { hexToBytes } from '@stacks/common';\nexport function createMessageSignature(signature) {\n  var length = hexToBytes(signature).byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: signature\n  };\n}\nexport function addressHashModeToVersion(hashMode, txVersion) {\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetSingleSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetSingleSig;\n        default:\n          throw new Error(\"Unexpected txVersion \".concat(JSON.stringify(txVersion), \" for hashMode \").concat(hashMode));\n      }\n    case AddressHashMode.SerializeP2SH:\n    case AddressHashMode.SerializeP2WPKH:\n    case AddressHashMode.SerializeP2WSH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetMultiSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetMultiSig;\n        default:\n          throw new Error(\"Unexpected txVersion \".concat(JSON.stringify(txVersion), \" for hashMode \").concat(hashMode));\n      }\n    default:\n      throw new Error(\"Unexpected hashMode \".concat(JSON.stringify(hashMode)));\n  }\n}\nexport function addressFromVersionHash(version, hash) {\n  return {\n    type: StacksMessageType.Address,\n    version: version,\n    hash160: hash\n  };\n}\nexport function addressToString(address) {\n  return c32address(address.version, address.hash160);\n}","map":{"version":3,"names":["AddressHashMode","AddressVersion","RECOVERABLE_ECDSA_SIG_LENGTH_BYTES","StacksMessageType","TransactionVersion","c32address","hexToBytes","createMessageSignature","signature","length","byteLength","Error","type","MessageSignature","data","addressHashModeToVersion","hashMode","txVersion","SerializeP2PKH","Mainnet","MainnetSingleSig","Testnet","TestnetSingleSig","concat","JSON","stringify","SerializeP2SH","SerializeP2WPKH","SerializeP2WSH","MainnetMultiSig","TestnetMultiSig","addressFromVersionHash","version","hash","Address","hash160","addressToString","address"],"sources":["C:\\Users\\rajde\\gitrep\\deploy\\frontend\\node_modules\\@stacks\\transactions\\src\\common.ts"],"sourcesContent":["import {\n  AddressHashMode,\n  AddressVersion,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  StacksMessageType,\n  TransactionVersion,\n} from './constants';\n\nimport { c32address } from 'c32check';\nimport { hexToBytes } from '@stacks/common';\n\nexport interface Address {\n  readonly type: StacksMessageType.Address;\n  readonly version: AddressVersion;\n  readonly hash160: string;\n}\n\nexport interface MessageSignature {\n  readonly type: StacksMessageType.MessageSignature;\n  data: string;\n}\n\nexport function createMessageSignature(signature: string): MessageSignature {\n  const length = hexToBytes(signature).byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: signature,\n  };\n}\n\n/**\n * Translates the tx auth hash mode to the corresponding address version.\n * @see https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#transaction-authorization\n */\nexport function addressHashModeToVersion(\n  hashMode: AddressHashMode,\n  txVersion: TransactionVersion\n): AddressVersion {\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetSingleSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetSingleSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    case AddressHashMode.SerializeP2SH:\n    case AddressHashMode.SerializeP2WPKH:\n    case AddressHashMode.SerializeP2WSH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetMultiSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetMultiSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    default:\n      throw new Error(`Unexpected hashMode ${JSON.stringify(hashMode)}`);\n  }\n}\n\nexport function addressFromVersionHash(version: AddressVersion, hash: string): Address {\n  return { type: StacksMessageType.Address, version, hash160: hash };\n}\n\nexport function addressToString(address: Address): string {\n  return c32address(address.version, address.hash160);\n}\n"],"mappings":"AAAA,SACEA,eAAe,EACfC,cAAc,EACdC,kCAAkC,EAClCC,iBAAiB,EACjBC,kBAAkB,QACb,aAAa;AAEpB,SAASC,UAAU,QAAQ,UAAU;AACrC,SAASC,UAAU,QAAQ,gBAAgB;AAa3C,OAAM,SAAUC,sBAAsBA,CAACC,SAAiB;EACtD,IAAMC,MAAM,GAAGH,UAAU,CAACE,SAAS,CAAC,CAACE,UAAU;EAC/C,IAAID,MAAM,IAAIP,kCAAkC,EAAE;IAChD,MAAMS,KAAK,CAAC,mBAAmB,CAAC;;EAGlC,OAAO;IACLC,IAAI,EAAET,iBAAiB,CAACU,gBAAgB;IACxCC,IAAI,EAAEN;GACP;AACH;AAMA,OAAM,SAAUO,wBAAwBA,CACtCC,QAAyB,EACzBC,SAA6B;EAE7B,QAAQD,QAAQ;IACd,KAAKhB,eAAe,CAACkB,cAAc;MACjC,QAAQD,SAAS;QACf,KAAKb,kBAAkB,CAACe,OAAO;UAC7B,OAAOlB,cAAc,CAACmB,gBAAgB;QACxC,KAAKhB,kBAAkB,CAACiB,OAAO;UAC7B,OAAOpB,cAAc,CAACqB,gBAAgB;QACxC;UACE,MAAM,IAAIX,KAAK,yBAAAY,MAAA,CACWC,IAAI,CAACC,SAAS,CAACR,SAAS,CAAC,oBAAAM,MAAA,CAAiBP,QAAQ,CAAE,CAC7E;;IAEP,KAAKhB,eAAe,CAAC0B,aAAa;IAClC,KAAK1B,eAAe,CAAC2B,eAAe;IACpC,KAAK3B,eAAe,CAAC4B,cAAc;MACjC,QAAQX,SAAS;QACf,KAAKb,kBAAkB,CAACe,OAAO;UAC7B,OAAOlB,cAAc,CAAC4B,eAAe;QACvC,KAAKzB,kBAAkB,CAACiB,OAAO;UAC7B,OAAOpB,cAAc,CAAC6B,eAAe;QACvC;UACE,MAAM,IAAInB,KAAK,yBAAAY,MAAA,CACWC,IAAI,CAACC,SAAS,CAACR,SAAS,CAAC,oBAAAM,MAAA,CAAiBP,QAAQ,CAAE,CAC7E;;IAEP;MACE,MAAM,IAAIL,KAAK,wBAAAY,MAAA,CAAwBC,IAAI,CAACC,SAAS,CAACT,QAAQ,CAAC,CAAE,CAAC;;AAExE;AAEA,OAAM,SAAUe,sBAAsBA,CAACC,OAAuB,EAAEC,IAAY;EAC1E,OAAO;IAAErB,IAAI,EAAET,iBAAiB,CAAC+B,OAAO;IAAEF,OAAO,EAAPA,OAAO;IAAEG,OAAO,EAAEF;EAAI,CAAE;AACpE;AAEA,OAAM,SAAUG,eAAeA,CAACC,OAAgB;EAC9C,OAAOhC,UAAU,CAACgC,OAAO,CAACL,OAAO,EAAEK,OAAO,CAACF,OAAO,CAAC;AACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}