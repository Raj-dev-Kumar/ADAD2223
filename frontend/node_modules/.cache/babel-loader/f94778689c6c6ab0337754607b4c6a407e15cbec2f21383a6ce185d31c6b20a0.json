{"ast":null,"code":"import { principalToString } from './types/principalCV';\nimport { ClarityType } from './constants';\nimport { asciiToBytes, bytesToAscii, bytesToHex, utf8ToBytes } from '@stacks/common';\nexport function cvToString(val) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hex';\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return 'true';\n    case ClarityType.BoolFalse:\n      return 'false';\n    case ClarityType.Int:\n      return val.value.toString();\n    case ClarityType.UInt:\n      return \"u\".concat(val.value.toString());\n    case ClarityType.Buffer:\n      if (encoding === 'tryAscii') {\n        var str = bytesToAscii(val.buffer);\n        if (/[ -~]/.test(str)) {\n          return JSON.stringify(str);\n        }\n      }\n      return \"0x\".concat(bytesToHex(val.buffer));\n    case ClarityType.OptionalNone:\n      return 'none';\n    case ClarityType.OptionalSome:\n      return \"(some \".concat(cvToString(val.value, encoding), \")\");\n    case ClarityType.ResponseErr:\n      return \"(err \".concat(cvToString(val.value, encoding), \")\");\n    case ClarityType.ResponseOk:\n      return \"(ok \".concat(cvToString(val.value, encoding), \")\");\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return \"(list \".concat(val.list.map(function (v) {\n        return cvToString(v, encoding);\n      }).join(' '), \")\");\n    case ClarityType.Tuple:\n      return \"(tuple \".concat(Object.keys(val.data).map(function (key) {\n        return \"(\".concat(key, \" \").concat(cvToString(val.data[key], encoding), \")\");\n      }).join(' '), \")\");\n    case ClarityType.StringASCII:\n      return \"\\\"\".concat(val.data, \"\\\"\");\n    case ClarityType.StringUTF8:\n      return \"u\\\"\".concat(val.data, \"\\\"\");\n  }\n}\nexport function cvToValue(val) {\n  var strictJsonCompat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return true;\n    case ClarityType.BoolFalse:\n      return false;\n    case ClarityType.Int:\n    case ClarityType.UInt:\n      if (strictJsonCompat) {\n        return val.value.toString();\n      }\n      return val.value;\n    case ClarityType.Buffer:\n      return \"0x\".concat(bytesToHex(val.buffer));\n    case ClarityType.OptionalNone:\n      return null;\n    case ClarityType.OptionalSome:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseErr:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseOk:\n      return cvToJSON(val.value);\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return val.list.map(function (v) {\n        return cvToJSON(v);\n      });\n    case ClarityType.Tuple:\n      var result = {};\n      Object.keys(val.data).forEach(function (key) {\n        result[key] = cvToJSON(val.data[key]);\n      });\n      return result;\n    case ClarityType.StringASCII:\n      return val.data;\n    case ClarityType.StringUTF8:\n      return val.data;\n  }\n}\nexport function cvToJSON(val) {\n  switch (val.type) {\n    case ClarityType.ResponseErr:\n      return {\n        type: getCVTypeString(val),\n        value: cvToValue(val, true),\n        success: false\n      };\n    case ClarityType.ResponseOk:\n      return {\n        type: getCVTypeString(val),\n        value: cvToValue(val, true),\n        success: true\n      };\n    default:\n      return {\n        type: getCVTypeString(val),\n        value: cvToValue(val, true)\n      };\n  }\n}\nexport function getCVTypeString(val) {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return 'bool';\n    case ClarityType.Int:\n      return 'int';\n    case ClarityType.UInt:\n      return 'uint';\n    case ClarityType.Buffer:\n      return \"(buff \".concat(val.buffer.length, \")\");\n    case ClarityType.OptionalNone:\n      return '(optional none)';\n    case ClarityType.OptionalSome:\n      return \"(optional \".concat(getCVTypeString(val.value), \")\");\n    case ClarityType.ResponseErr:\n      return \"(response UnknownType \".concat(getCVTypeString(val.value), \")\");\n    case ClarityType.ResponseOk:\n      return \"(response \".concat(getCVTypeString(val.value), \" UnknownType)\");\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return 'principal';\n    case ClarityType.List:\n      return \"(list \".concat(val.list.length, \" \").concat(val.list.length ? getCVTypeString(val.list[0]) : 'UnknownType', \")\");\n    case ClarityType.Tuple:\n      return \"(tuple \".concat(Object.keys(val.data).map(function (key) {\n        return \"(\".concat(key, \" \").concat(getCVTypeString(val.data[key]), \")\");\n      }).join(' '), \")\");\n    case ClarityType.StringASCII:\n      return \"(string-ascii \".concat(asciiToBytes(val.data).length, \")\");\n    case ClarityType.StringUTF8:\n      return \"(string-utf8 \".concat(utf8ToBytes(val.data).length, \")\");\n  }\n}","map":{"version":3,"names":["principalToString","ClarityType","asciiToBytes","bytesToAscii","bytesToHex","utf8ToBytes","cvToString","val","encoding","arguments","length","undefined","type","BoolTrue","BoolFalse","Int","value","toString","UInt","concat","Buffer","str","buffer","test","JSON","stringify","OptionalNone","OptionalSome","ResponseErr","ResponseOk","PrincipalStandard","PrincipalContract","List","list","map","v","join","Tuple","Object","keys","data","key","StringASCII","StringUTF8","cvToValue","strictJsonCompat","cvToJSON","result","forEach","getCVTypeString","success"],"sources":["C:\\Users\\rajde\\gitrep\\deploy\\frontend\\node_modules\\@stacks\\transactions\\src\\clarity\\clarityValue.ts"],"sourcesContent":["import {\n  BooleanCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseErrorCV,\n  ResponseOkCV,\n  ListCV,\n  TupleCV,\n  StringAsciiCV,\n  StringUtf8CV,\n  NoneCV,\n  SomeCV,\n} from '.';\n\nimport { principalToString } from './types/principalCV';\nimport { ClarityType } from './constants';\nimport { asciiToBytes, bytesToAscii, bytesToHex, utf8ToBytes } from '@stacks/common';\n\nexport type ClarityValue =\n  | BooleanCV\n  | BufferCV\n  | IntCV\n  | UIntCV\n  | StandardPrincipalCV\n  | ContractPrincipalCV\n  | ResponseErrorCV\n  | ResponseOkCV\n  | NoneCV\n  | SomeCV\n  | ListCV\n  | TupleCV\n  | StringAsciiCV\n  | StringUtf8CV;\n\nexport function cvToString(val: ClarityValue, encoding: 'tryAscii' | 'hex' = 'hex'): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return 'true';\n    case ClarityType.BoolFalse:\n      return 'false';\n    case ClarityType.Int:\n      return val.value.toString();\n    case ClarityType.UInt:\n      return `u${val.value.toString()}`;\n    case ClarityType.Buffer:\n      if (encoding === 'tryAscii') {\n        const str = bytesToAscii(val.buffer);\n        if (/[ -~]/.test(str)) {\n          return JSON.stringify(str);\n        }\n      }\n      return `0x${bytesToHex(val.buffer)}`;\n    case ClarityType.OptionalNone:\n      return 'none';\n    case ClarityType.OptionalSome:\n      return `(some ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseErr:\n      return `(err ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseOk:\n      return `(ok ${cvToString(val.value, encoding)})`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return `(list ${val.list.map(v => cvToString(v, encoding)).join(' ')})`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${cvToString(val.data[key], encoding)})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `\"${val.data}\"`;\n    case ClarityType.StringUTF8:\n      return `u\"${val.data}\"`;\n  }\n}\n\n/**\n * @param strictJsonCompat If true then ints and uints are returned as JSON serializable numbers when\n * less than or equal to 53 bit length, otherwise string wrapped integers when larger than 53 bits.\n * If false, they are returned as js native `bigint`s which are _not_ JSON serializable.\n */\nexport function cvToValue(val: ClarityValue, strictJsonCompat: boolean = false): any {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return true;\n    case ClarityType.BoolFalse:\n      return false;\n    case ClarityType.Int:\n    case ClarityType.UInt:\n      if (strictJsonCompat) {\n        return val.value.toString();\n      }\n      return val.value;\n    case ClarityType.Buffer:\n      return `0x${bytesToHex(val.buffer)}`;\n    case ClarityType.OptionalNone:\n      return null;\n    case ClarityType.OptionalSome:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseErr:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseOk:\n      return cvToJSON(val.value);\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return val.list.map(v => cvToJSON(v));\n    case ClarityType.Tuple:\n      const result: { [key: string]: any } = {};\n      Object.keys(val.data).forEach(key => {\n        result[key] = cvToJSON(val.data[key]);\n      });\n      return result;\n    case ClarityType.StringASCII:\n      return val.data;\n    case ClarityType.StringUTF8:\n      return val.data;\n  }\n}\n\nexport function cvToJSON(val: ClarityValue): any {\n  switch (val.type) {\n    case ClarityType.ResponseErr:\n      return { type: getCVTypeString(val), value: cvToValue(val, true), success: false };\n    case ClarityType.ResponseOk:\n      return { type: getCVTypeString(val), value: cvToValue(val, true), success: true };\n    default:\n      return { type: getCVTypeString(val), value: cvToValue(val, true) };\n  }\n}\n\nexport function getCVTypeString(val: ClarityValue): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return 'bool';\n    case ClarityType.Int:\n      return 'int';\n    case ClarityType.UInt:\n      return 'uint';\n    case ClarityType.Buffer:\n      return `(buff ${val.buffer.length})`;\n    case ClarityType.OptionalNone:\n      return '(optional none)';\n    case ClarityType.OptionalSome:\n      return `(optional ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseErr:\n      return `(response UnknownType ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseOk:\n      return `(response ${getCVTypeString(val.value)} UnknownType)`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return 'principal';\n    case ClarityType.List:\n      return `(list ${val.list.length} ${\n        val.list.length ? getCVTypeString(val.list[0]) : 'UnknownType'\n      })`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${getCVTypeString(val.data[key])})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `(string-ascii ${asciiToBytes(val.data).length})`;\n    case ClarityType.StringUTF8:\n      return `(string-utf8 ${utf8ToBytes(val.data).length})`;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}