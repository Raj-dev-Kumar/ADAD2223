{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _classCallCheck = require(\"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SHA2 = void 0;\nvar _assert_js_1 = require(\"./_assert.js\");\nvar utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  var _32n = BigInt(32);\n  var _u32_max = BigInt(0xffffffff);\n  var wh = Number(value >> _32n & _u32_max);\n  var wl = Number(value & _u32_max);\n  var h = isLE ? 4 : 0;\n  var l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nvar SHA2 = /*#__PURE__*/function (_utils_js_1$Hash) {\n  _inherits(SHA2, _utils_js_1$Hash);\n  var _super = _createSuper(SHA2);\n  function SHA2(blockLen, outputLen, padOffset, isLE) {\n    var _this;\n    _classCallCheck(this, SHA2);\n    _this = _super.call(this);\n    _this.blockLen = blockLen;\n    _this.outputLen = outputLen;\n    _this.padOffset = padOffset;\n    _this.isLE = isLE;\n    _this.finished = false;\n    _this.length = 0;\n    _this.pos = 0;\n    _this.destroyed = false;\n    _this.buffer = new Uint8Array(blockLen);\n    _this.view = (0, utils_js_1.createView)(_this.buffer);\n    return _this;\n  }\n  _createClass(SHA2, [{\n    key: \"update\",\n    value: function update(data) {\n      _assert_js_1.default.exists(this);\n      var view = this.view,\n        buffer = this.buffer,\n        blockLen = this.blockLen;\n      data = (0, utils_js_1.toBytes)(data);\n      var len = data.length;\n      for (var pos = 0; pos < len;) {\n        var take = Math.min(blockLen - this.pos, len - pos);\n        // Fast path: we have at least one block in input, cast it to view and process\n        if (take === blockLen) {\n          var dataView = (0, utils_js_1.createView)(data);\n          for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n          continue;\n        }\n        buffer.set(data.subarray(pos, pos + take), this.pos);\n        this.pos += take;\n        pos += take;\n        if (this.pos === blockLen) {\n          this.process(view, 0);\n          this.pos = 0;\n        }\n      }\n      this.length += data.length;\n      this.roundClean();\n      return this;\n    }\n  }, {\n    key: \"digestInto\",\n    value: function digestInto(out) {\n      _assert_js_1.default.exists(this);\n      _assert_js_1.default.output(out, this);\n      this.finished = true;\n      // Padding\n      // We can avoid allocation of buffer for padding completely if it\n      // was previously not allocated here. But it won't change performance.\n      var buffer = this.buffer,\n        view = this.view,\n        blockLen = this.blockLen,\n        isLE = this.isLE;\n      var pos = this.pos;\n      // append the bit '1' to the message\n      buffer[pos++] = 128;\n      this.buffer.subarray(pos).fill(0);\n      // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n      if (this.padOffset > blockLen - pos) {\n        this.process(view, 0);\n        pos = 0;\n      }\n      // Pad until full block byte with zeros\n      for (var i = pos; i < blockLen; i++) buffer[i] = 0;\n      // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n      // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n      // So we just write lowest 64 bits of that value.\n      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n      this.process(view, 0);\n      var oview = (0, utils_js_1.createView)(out);\n      var len = this.outputLen;\n      // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n      if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n      var outLen = len / 4;\n      var state = this.get();\n      if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n      for (var _i = 0; _i < outLen; _i++) oview.setUint32(4 * _i, state[_i], isLE);\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      var buffer = this.buffer,\n        outputLen = this.outputLen;\n      this.digestInto(buffer);\n      var res = buffer.slice(0, outputLen);\n      this.destroy();\n      return res;\n    }\n  }, {\n    key: \"_cloneInto\",\n    value: function _cloneInto(to) {\n      var _to;\n      to || (to = new this.constructor());\n      (_to = to).set.apply(_to, _toConsumableArray(this.get()));\n      var blockLen = this.blockLen,\n        buffer = this.buffer,\n        length = this.length,\n        finished = this.finished,\n        destroyed = this.destroyed,\n        pos = this.pos;\n      to.length = length;\n      to.pos = pos;\n      to.finished = finished;\n      to.destroyed = destroyed;\n      if (length % blockLen) to.buffer.set(buffer);\n      return to;\n    }\n  }]);\n  return SHA2;\n}(utils_js_1.Hash);\nexports.SHA2 = SHA2;","map":{"version":3,"names":["_toConsumableArray","require","default","_classCallCheck","_createClass","_inherits","_createSuper","Object","defineProperty","exports","value","SHA2","_assert_js_1","utils_js_1","setBigUint64","view","byteOffset","isLE","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","_utils_js_1$Hash","_super","blockLen","outputLen","padOffset","_this","call","finished","length","pos","destroyed","buffer","Uint8Array","createView","key","update","data","exists","toBytes","len","take","Math","min","dataView","process","set","subarray","roundClean","digestInto","out","output","fill","i","oview","Error","outLen","state","get","digest","res","slice","destroy","_cloneInto","to","_to","constructor","apply","Hash"],"sources":["C:/Users/rajde/gitrep/deploy/frontend/node_modules/@noble/hashes/_sha2.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}