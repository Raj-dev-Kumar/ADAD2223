{"ast":null,"code":"import _objectSpread from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _slicedToArray from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { makeContractFungiblePostCondition, makeContractNonFungiblePostCondition, makeContractSTXPostCondition, makeStandardFungiblePostCondition, makeStandardNonFungiblePostCondition, makeStandardSTXPostCondition } from './builders';\nimport { FungibleConditionCode, NonFungibleConditionCode } from './constants';\nimport { createAssetInfo } from './postcondition-types';\nexport function principal(principal) {\n  if (isContractIdString(principal)) {\n    var _parseContractId = parseContractId(principal),\n      _parseContractId2 = _slicedToArray(_parseContractId, 2),\n      address = _parseContractId2[0],\n      name = _parseContractId2[1];\n    return new PartialPcWithPrincipal(address, name);\n  }\n  return new PartialPcWithPrincipal(principal, undefined);\n}\nvar PartialPcWithPrincipal = /*#__PURE__*/function () {\n  function PartialPcWithPrincipal(address, contractName) {\n    _classCallCheck(this, PartialPcWithPrincipal);\n    this.address = address;\n    this.contractName = contractName;\n  }\n  _createClass(PartialPcWithPrincipal, [{\n    key: \"willSendEq\",\n    value: function willSendEq(amount) {\n      return new PartialPcFtWithCode(this.address, amount, FungibleConditionCode.Equal, this.contractName);\n    }\n  }, {\n    key: \"willSendLte\",\n    value: function willSendLte(amount) {\n      return new PartialPcFtWithCode(this.address, amount, FungibleConditionCode.LessEqual, this.contractName);\n    }\n  }, {\n    key: \"willSendLt\",\n    value: function willSendLt(amount) {\n      return new PartialPcFtWithCode(this.address, amount, FungibleConditionCode.Less, this.contractName);\n    }\n  }, {\n    key: \"willSendGte\",\n    value: function willSendGte(amount) {\n      return new PartialPcFtWithCode(this.address, amount, FungibleConditionCode.GreaterEqual, this.contractName);\n    }\n  }, {\n    key: \"willSendGt\",\n    value: function willSendGt(amount) {\n      return new PartialPcFtWithCode(this.address, amount, FungibleConditionCode.Greater, this.contractName);\n    }\n  }, {\n    key: \"willSendAsset\",\n    value: function willSendAsset() {\n      return new PartialPcNftWithCode(this.address, NonFungibleConditionCode.Sends, this.contractName);\n    }\n  }, {\n    key: \"willNotSendAsset\",\n    value: function willNotSendAsset() {\n      return new PartialPcNftWithCode(this.address, NonFungibleConditionCode.DoesNotSend, this.contractName);\n    }\n  }]);\n  return PartialPcWithPrincipal;\n}();\nvar PartialPcFtWithCode = /*#__PURE__*/function () {\n  function PartialPcFtWithCode(address, amount, code, contractName) {\n    _classCallCheck(this, PartialPcFtWithCode);\n    this.address = address;\n    this.amount = amount;\n    this.code = code;\n    this.contractName = contractName;\n  }\n  _createClass(PartialPcFtWithCode, [{\n    key: \"ustx\",\n    value: function ustx() {\n      if (this.contractName) {\n        return makeContractSTXPostCondition(this.address, this.contractName, this.code, this.amount);\n      }\n      return makeStandardSTXPostCondition(this.address, this.code, this.amount);\n    }\n  }, {\n    key: \"ft\",\n    value: function ft(contractId, tokenName) {\n      var _parseContractId3 = parseContractId(contractId),\n        _parseContractId4 = _slicedToArray(_parseContractId3, 2),\n        address = _parseContractId4[0],\n        name = _parseContractId4[1];\n      if (this.contractName) {\n        return makeContractFungiblePostCondition(this.address, this.contractName, this.code, this.amount, createAssetInfo(address, name, tokenName));\n      }\n      return makeStandardFungiblePostCondition(this.address, this.code, this.amount, createAssetInfo(address, name, tokenName));\n    }\n  }]);\n  return PartialPcFtWithCode;\n}();\nvar PartialPcNftWithCode = /*#__PURE__*/function () {\n  function PartialPcNftWithCode(principal, code, contractName) {\n    _classCallCheck(this, PartialPcNftWithCode);\n    this.principal = principal;\n    this.code = code;\n    this.contractName = contractName;\n  }\n  _createClass(PartialPcNftWithCode, [{\n    key: \"nft\",\n    value: function nft() {\n      var _getNftArgs = getNftArgs.apply(void 0, arguments),\n        contractAddress = _getNftArgs.contractAddress,\n        contractName = _getNftArgs.contractName,\n        tokenName = _getNftArgs.tokenName,\n        assetId = _getNftArgs.assetId;\n      if (this.contractName) {\n        return makeContractNonFungiblePostCondition(this.principal, this.contractName, this.code, createAssetInfo(contractAddress, contractName, tokenName), assetId);\n      }\n      return makeStandardNonFungiblePostCondition(this.principal, this.code, createAssetInfo(contractAddress, contractName, tokenName), assetId);\n    }\n  }]);\n  return PartialPcNftWithCode;\n}();\nfunction parseContractId(contractId) {\n  var _contractId$split = contractId.split('.'),\n    _contractId$split2 = _slicedToArray(_contractId$split, 2),\n    address = _contractId$split2[0],\n    name = _contractId$split2[1];\n  if (!address || !name) throw new Error(\"Invalid contract identifier: \".concat(contractId));\n  return [address, name];\n}\nfunction parseNft(nftAssetName) {\n  var _nftAssetName$split = nftAssetName.split('::'),\n    _nftAssetName$split2 = _slicedToArray(_nftAssetName$split, 2),\n    principal = _nftAssetName$split2[0],\n    tokenName = _nftAssetName$split2[1];\n  if (!principal || !tokenName) throw new Error(\"Invalid fully-qualified nft asset name: \".concat(nftAssetName));\n  var _parseContractId5 = parseContractId(principal),\n    _parseContractId6 = _slicedToArray(_parseContractId5, 2),\n    address = _parseContractId6[0],\n    name = _parseContractId6[1];\n  return {\n    contractAddress: address,\n    contractName: name,\n    tokenName: tokenName\n  };\n}\nfunction isContractIdString(value) {\n  return value.includes('.');\n}\nfunction getNftArgs() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (args.length === 2) {\n    var assetName = args[0],\n      _assetId = args[1];\n    return _objectSpread(_objectSpread({}, parseNft(assetName)), {}, {\n      assetId: _assetId\n    });\n  }\n  var contractId = args[0],\n    tokenName = args[1],\n    assetId = args[2];\n  var _parseContractId7 = parseContractId(contractId),\n    _parseContractId8 = _slicedToArray(_parseContractId7, 2),\n    address = _parseContractId8[0],\n    name = _parseContractId8[1];\n  return {\n    contractAddress: address,\n    contractName: name,\n    tokenName: tokenName,\n    assetId: assetId\n  };\n}","map":{"version":3,"names":["makeContractFungiblePostCondition","makeContractNonFungiblePostCondition","makeContractSTXPostCondition","makeStandardFungiblePostCondition","makeStandardNonFungiblePostCondition","makeStandardSTXPostCondition","FungibleConditionCode","NonFungibleConditionCode","createAssetInfo","principal","isContractIdString","_parseContractId","parseContractId","_parseContractId2","_slicedToArray","address","name","PartialPcWithPrincipal","undefined","contractName","_classCallCheck","_createClass","key","value","willSendEq","amount","PartialPcFtWithCode","Equal","willSendLte","LessEqual","willSendLt","Less","willSendGte","GreaterEqual","willSendGt","Greater","willSendAsset","PartialPcNftWithCode","Sends","willNotSendAsset","DoesNotSend","code","ustx","ft","contractId","tokenName","_parseContractId3","_parseContractId4","nft","_getNftArgs","getNftArgs","apply","arguments","contractAddress","assetId","_contractId$split","split","_contractId$split2","Error","concat","parseNft","nftAssetName","_nftAssetName$split","_nftAssetName$split2","_parseContractId5","_parseContractId6","includes","_len","length","args","Array","_key","assetName","_objectSpread","_parseContractId7","_parseContractId8"],"sources":["C:\\Users\\rajde\\gitrep\\deploy\\frontend\\node_modules\\@stacks\\transactions\\src\\pc.ts"],"sourcesContent":["import { IntegerType } from '@stacks/common';\nimport {\n  makeContractFungiblePostCondition,\n  makeContractNonFungiblePostCondition,\n  makeContractSTXPostCondition,\n  makeStandardFungiblePostCondition,\n  makeStandardNonFungiblePostCondition,\n  makeStandardSTXPostCondition,\n} from './builders';\nimport { ClarityValue } from './clarity';\nimport { FungibleConditionCode, NonFungibleConditionCode } from './constants';\nimport { createAssetInfo, NonFungiblePostCondition } from './postcondition-types';\n\n/// `Pc.` Post Condition Builder\n//\n// This is a behavioral helper interface for constructing post conditions.\n//\n// The general pattern is:\n//   PRINCIPAL -> [AMOUNT] -> CODE -> ASSET\n//\n\n/**\n * An address string encoded as c32check\n */\ntype AddressString = string;\n\n/**\n * A contract identifier string given as `<address>.<contract-name>`\n */\ntype ContractIdString = `${string}.${string}`;\n\n/**\n * An asset identifier string given as `<contract-id>::<token-name>` aka `<contract-address>.<contract-name>::<token-name>`\n */\ntype NftString = `${ContractIdString}::${string}`;\n\n/**\n * ### `Pc.` Post Condition Builder\n * @beta Interface may be subject to change in future releases.\n * @param {AddressString | ContractIdString} principal The principal to check, which should/should-not be sending assets. A string in the format \"address\" or \"address.contractId\".\n * @returns A partial post condition builder, which can be chained into a final post condition.\n * @example\n * ```\n * import { Pc } from '@stacks/transactions';\n * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendEq(10000).ustx();\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport function principal(principal: AddressString | ContractIdString) {\n  if (isContractIdString(principal)) {\n    // `principal` is a ContractIdString here\n    const [address, name] = parseContractId(principal);\n    return new PartialPcWithPrincipal(address, name);\n  }\n\n  return new PartialPcWithPrincipal(principal, undefined);\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcWithPrincipal {\n  constructor(\n    private address: string,\n    private contractName?: string\n  ) {}\n\n  // todo: split FT and STX into separate methods? e.g. `willSendSTXEq` and `willSendFtEq`\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Equal` (equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendEq(100).stx();\n   * ```\n   */\n  willSendEq(amount: IntegerType) {\n    return new PartialPcFtWithCode(\n      this.address,\n      amount,\n      FungibleConditionCode.Equal,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.LessEqual` (less-than or equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendLte(100).stx();\n   * ```\n   */\n  willSendLte(amount: IntegerType) {\n    return new PartialPcFtWithCode(\n      this.address,\n      amount,\n      FungibleConditionCode.LessEqual,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Less` (less-than) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendLt(100).stx();\n   * ```\n   */\n  willSendLt(amount: IntegerType) {\n    return new PartialPcFtWithCode(\n      this.address,\n      amount,\n      FungibleConditionCode.Less,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.GreaterEqual` (greater-than or equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendGte(100).stx();\n   * ```\n   */\n  willSendGte(amount: IntegerType) {\n    return new PartialPcFtWithCode(\n      this.address,\n      amount,\n      FungibleConditionCode.GreaterEqual,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Greater` (greater-than) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendGt(100).stx();\n   * ```\n   */\n  willSendGt(amount: IntegerType) {\n    return new PartialPcFtWithCode(\n      this.address,\n      amount,\n      FungibleConditionCode.Greater,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### NFT Post Condition\n   * A post-condition which `NonFungibleConditionCode.Sends` an NFT.\n   * Finalize with the chained `.nft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB4…K6.nft-contract').willSendAsset().nft('STB4…K6.super-nft::super', uintCV(1));\n   * ```\n   */\n  willSendAsset() {\n    return new PartialPcNftWithCode(\n      this.address,\n      NonFungibleConditionCode.Sends,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### NFT Post Condition\n   * A post-condition which `NonFungibleConditionCode.DoesNotSend` an NFT.\n   * Finalize with the chained `.nft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB4…K6.nft-contract').willNotSendAsset().nft('STB4…K6.super-nft::super', uintCV(1));\n   * ```\n   */\n  willNotSendAsset() {\n    return new PartialPcNftWithCode(\n      this.address,\n      NonFungibleConditionCode.DoesNotSend,\n      this.contractName\n    );\n  }\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcFtWithCode {\n  constructor(\n    private address: string,\n    private amount: IntegerType,\n    private code: FungibleConditionCode,\n    private contractName?: string\n  ) {}\n\n  /**\n   * ### STX Post Condition\n   * ⚠ Amount of STX is denoted in uSTX (micro-STX)\n   */\n  ustx() {\n    // todo: rename to `uSTX`?\n    if (this.contractName) {\n      return makeContractSTXPostCondition(this.address, this.contractName, this.code, this.amount);\n    }\n    return makeStandardSTXPostCondition(this.address, this.code, this.amount);\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * ⚠ Amount of fungible tokens is denoted in the smallest unit of the token\n   */\n  ft(contractId: ContractIdString, tokenName: string) {\n    const [address, name] = parseContractId(contractId);\n    if (this.contractName) {\n      return makeContractFungiblePostCondition(\n        this.address,\n        this.contractName,\n        this.code,\n        this.amount,\n        createAssetInfo(address, name, tokenName)\n      );\n    }\n    return makeStandardFungiblePostCondition(\n      this.address,\n      this.code,\n      this.amount,\n      createAssetInfo(address, name, tokenName)\n    );\n  }\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcNftWithCode {\n  constructor(\n    private principal: string,\n    private code: NonFungibleConditionCode,\n    private contractName?: string\n  ) {}\n\n  /**\n   * ### Non-Fungible Token Post Condition\n   * @param assetName - The name of the NFT asset. Formatted as `<contract-address>.<contract-name>::<token-name>`.\n   * @param assetId - The asset identifier of the NFT. A Clarity value defining the single NFT instance.\n   */\n  nft(assetName: NftString, assetId: ClarityValue): NonFungiblePostCondition;\n  /**\n   * ### Non-Fungible Token Post Condition\n   * @param contractId - The contract identifier of the NFT. Formatted as `<contract-address>.<contract-name>`.\n   * @param tokenName - The name of the NFT asset.\n   * @param assetId - The asset identifier of the NFT. A Clarity value defining the single NFT instance.\n   */\n  nft(\n    contractId: ContractIdString,\n    tokenName: string,\n    assetId: ClarityValue\n  ): NonFungiblePostCondition;\n  nft(...args: [any, any] | [any, any, any]): NonFungiblePostCondition {\n    const { contractAddress, contractName, tokenName, assetId } = getNftArgs(\n      ...(args as [any, any, any])\n    );\n\n    if (this.contractName) {\n      return makeContractNonFungiblePostCondition(\n        this.principal,\n        this.contractName,\n        this.code,\n        createAssetInfo(contractAddress, contractName, tokenName),\n        assetId\n      );\n    }\n\n    return makeStandardNonFungiblePostCondition(\n      this.principal,\n      this.code,\n      createAssetInfo(contractAddress, contractName, tokenName),\n      assetId\n    );\n  }\n}\n\n/** @internal */\nfunction parseContractId(contractId: ContractIdString) {\n  const [address, name] = contractId.split('.');\n  if (!address || !name) throw new Error(`Invalid contract identifier: ${contractId}`);\n  return [address, name];\n}\n\n/** @internal */\nfunction parseNft(nftAssetName: NftString) {\n  const [principal, tokenName] = nftAssetName.split('::') as [ContractIdString, string];\n  if (!principal || !tokenName)\n    throw new Error(`Invalid fully-qualified nft asset name: ${nftAssetName}`);\n  const [address, name] = parseContractId(principal);\n  return { contractAddress: address, contractName: name, tokenName };\n}\n\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nfunction isContractIdString(value: AddressString | ContractIdString): value is ContractIdString {\n  return value.includes('.');\n}\n\n/**\n * Helper method for `PartialPcNftWithCode.nft` to parse the arguments.\n * @internal\n */\nfunction getNftArgs(\n  assetName: NftString,\n  assetId: ClarityValue\n): { contractAddress: string; contractName: string; tokenName: string; assetId: ClarityValue };\nfunction getNftArgs(\n  contractId: ContractIdString,\n  tokenName: string,\n  assetId: ClarityValue\n): { contractAddress: string; contractName: string; tokenName: string; assetId: ClarityValue };\nfunction getNftArgs(...args: [any, any] | [any, any, any]): {\n  contractAddress: string;\n  contractName: string;\n  tokenName: string;\n  assetId: ClarityValue;\n} {\n  if (args.length === 2) {\n    const [assetName, assetId] = args;\n    return { ...parseNft(assetName), assetId };\n  }\n\n  // args.length === 3\n  const [contractId, tokenName, assetId] = args;\n  const [address, name] = parseContractId(contractId);\n  return { contractAddress: address, contractName: name, tokenName, assetId };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}