{"ast":null,"code":"import _slicedToArray from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { bytesToHex } from '@stacks/common';\nimport { ClarityType, principalToString } from '.';\nfunction formatSpace(space, depth) {\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!space) return ' ';\n  return \"\\n\".concat(' '.repeat(space * (depth - (end ? 1 : 0))));\n}\nfunction formatList(cv, space) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (cv.list.length === 0) return '(list)';\n  var spaceBefore = formatSpace(space, depth, false);\n  var endSpace = space ? formatSpace(space, depth, true) : '';\n  var items = cv.list.map(function (v) {\n    return prettyPrintWithDepth(v, space, depth);\n  }).join(spaceBefore);\n  return \"(list\".concat(spaceBefore).concat(items).concat(endSpace, \")\");\n}\nfunction formatTuple(cv, space) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (Object.keys(cv.data).length === 0) return '{}';\n  var items = [];\n  for (var _i = 0, _Object$entries = Object.entries(cv.data); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      value = _Object$entries$_i[1];\n    items.push(\"\".concat(key, \": \").concat(prettyPrintWithDepth(value, space, depth)));\n  }\n  var spaceBefore = formatSpace(space, depth, false);\n  var endSpace = formatSpace(space, depth, true);\n  return \"{\".concat(spaceBefore).concat(items.join(\",\".concat(spaceBefore))).concat(endSpace, \"}\");\n}\nfunction exhaustiveCheck(param) {\n  throw new Error(\"invalid clarity value type: \".concat(param));\n}\nfunction prettyPrintWithDepth(cv) {\n  var space = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var depth = arguments.length > 2 ? arguments[2] : undefined;\n  if (cv.type === ClarityType.BoolFalse) return 'false';\n  if (cv.type === ClarityType.BoolTrue) return 'true';\n  if (cv.type === ClarityType.Int) return cv.value.toString();\n  if (cv.type === ClarityType.UInt) return \"u\".concat(cv.value.toString());\n  if (cv.type === ClarityType.StringASCII) return \"\\\"\".concat(cv.data, \"\\\"\");\n  if (cv.type === ClarityType.StringUTF8) return \"u\\\"\".concat(cv.data, \"\\\"\");\n  if (cv.type === ClarityType.PrincipalContract) return \"'\".concat(principalToString(cv));\n  if (cv.type === ClarityType.PrincipalStandard) return \"'\".concat(principalToString(cv));\n  if (cv.type === ClarityType.Buffer) return \"0x\".concat(bytesToHex(cv.buffer));\n  if (cv.type === ClarityType.OptionalNone) return 'none';\n  if (cv.type === ClarityType.OptionalSome) return \"(some \".concat(prettyPrintWithDepth(cv.value, space, depth), \")\");\n  if (cv.type === ClarityType.ResponseOk) return \"(ok \".concat(prettyPrintWithDepth(cv.value, space, depth), \")\");\n  if (cv.type === ClarityType.ResponseErr) return \"(err \".concat(prettyPrintWithDepth(cv.value, space, depth), \")\");\n  if (cv.type === ClarityType.List) {\n    return formatList(cv, space, depth + 1);\n  }\n  if (cv.type === ClarityType.Tuple) {\n    return formatTuple(cv, space, depth + 1);\n  }\n  exhaustiveCheck(cv);\n}\nexport function prettyPrint(cv) {\n  var space = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return prettyPrintWithDepth(cv, space, 0);\n}","map":{"version":3,"names":["bytesToHex","ClarityType","principalToString","formatSpace","space","depth","end","arguments","length","undefined","concat","repeat","formatList","cv","list","spaceBefore","endSpace","items","map","v","prettyPrintWithDepth","join","formatTuple","Object","keys","data","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","key","value","push","exhaustiveCheck","param","Error","type","BoolFalse","BoolTrue","Int","toString","UInt","StringASCII","StringUTF8","PrincipalContract","PrincipalStandard","Buffer","buffer","OptionalNone","OptionalSome","ResponseOk","ResponseErr","List","Tuple","prettyPrint"],"sources":["C:\\Users\\rajde\\gitrep\\deploy\\frontend\\node_modules\\@stacks\\transactions\\src\\clarity\\prettyPrint.ts"],"sourcesContent":["/*\n  Format Clarity Values into Clarity style readable strings\n  eg:\n  `Cl.uint(1)` => u1\n  `Cl.list(Cl.uint(1))` => (list u1)\n  `Cl.tuple({ id: u1 })` => { id: u1 }\n*/\n\nimport { bytesToHex } from '@stacks/common';\nimport { ClarityType, ClarityValue, ListCV, TupleCV, principalToString } from '.';\n\nfunction formatSpace(space: number, depth: number, end = false) {\n  if (!space) return ' ';\n  return `\\n${' '.repeat(space * (depth - (end ? 1 : 0)))}`;\n}\n\n/**\n * @description format List clarity values in clarity style strings\n * with the ability to prettify the result with line break end space indentation\n * @example\n * ```ts\n * formatList(Cl.list([Cl.uint(1)]))\n * // (list u1)\n *\n * formatList(Cl.list([Cl.uint(1)]), 2)\n * // (list\n * //   u1\n * // )\n * ```\n */\nfunction formatList(cv: ListCV, space: number, depth = 1): string {\n  if (cv.list.length === 0) return '(list)';\n\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = space ? formatSpace(space, depth, true) : '';\n\n  const items = cv.list.map(v => prettyPrintWithDepth(v, space, depth)).join(spaceBefore);\n\n  return `(list${spaceBefore}${items}${endSpace})`;\n}\n\n/**\n * @description format Tuple clarity values in clarity style strings\n * with the ability to prettify the result with line break end space indentation\n * @example\n * ```ts\n * formatTuple(Cl.tuple({ id: Cl.uint(1) }))\n * // { id: u1 }\n *\n * formatTuple(Cl.tuple({ id: Cl.uint(1) }, 2))\n * // {\n * //   id: u1\n * // }\n * ```\n */\nfunction formatTuple(cv: TupleCV, space: number, depth = 1): string {\n  if (Object.keys(cv.data).length === 0) return '{}';\n\n  const items: string[] = [];\n  for (const [key, value] of Object.entries(cv.data)) {\n    items.push(`${key}: ${prettyPrintWithDepth(value, space, depth)}`);\n  }\n\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = formatSpace(space, depth, true);\n\n  return `{${spaceBefore}${items.join(`,${spaceBefore}`)}${endSpace}}`;\n}\n\nfunction exhaustiveCheck(param: never): never {\n  throw new Error(`invalid clarity value type: ${param}`);\n}\n\n// the exported function should not expose the `depth` argument\nfunction prettyPrintWithDepth(cv: ClarityValue, space = 0, depth: number): string {\n  if (cv.type === ClarityType.BoolFalse) return 'false';\n  if (cv.type === ClarityType.BoolTrue) return 'true';\n\n  if (cv.type === ClarityType.Int) return cv.value.toString();\n  if (cv.type === ClarityType.UInt) return `u${cv.value.toString()}`;\n\n  if (cv.type === ClarityType.StringASCII) return `\"${cv.data}\"`;\n  if (cv.type === ClarityType.StringUTF8) return `u\"${cv.data}\"`;\n\n  if (cv.type === ClarityType.PrincipalContract) return `'${principalToString(cv)}`;\n  if (cv.type === ClarityType.PrincipalStandard) return `'${principalToString(cv)}`;\n\n  if (cv.type === ClarityType.Buffer) return `0x${bytesToHex(cv.buffer)}`;\n\n  if (cv.type === ClarityType.OptionalNone) return 'none';\n  if (cv.type === ClarityType.OptionalSome)\n    return `(some ${prettyPrintWithDepth(cv.value, space, depth)})`;\n\n  if (cv.type === ClarityType.ResponseOk)\n    return `(ok ${prettyPrintWithDepth(cv.value, space, depth)})`;\n  if (cv.type === ClarityType.ResponseErr)\n    return `(err ${prettyPrintWithDepth(cv.value, space, depth)})`;\n\n  if (cv.type === ClarityType.List) {\n    return formatList(cv, space, depth + 1);\n  }\n  if (cv.type === ClarityType.Tuple) {\n    return formatTuple(cv, space, depth + 1);\n  }\n\n  // make sure that we exhausted all ClarityTypes\n  exhaustiveCheck(cv);\n}\n\n/**\n * @description format clarity values in clarity style strings\n * with the ability to prettify the result with line break end space indentation\n * @param cv The Clarity Value to format\n * @param space The indentation size of the output string. There's no indentation and no line breaks if space = 0\n * @example\n * ```ts\n * prettyPrint(Cl.tuple({ id: Cl.some(Cl.uint(1)) }))\n * // { id: (some u1) }\n *\n * prettyPrint(Cl.tuple({ id: Cl.uint(1) }, 2))\n * // {\n * //   id: u1\n * // }\n * ```\n */\nexport function prettyPrint(cv: ClarityValue, space = 0): string {\n  return prettyPrintWithDepth(cv, space, 0);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}