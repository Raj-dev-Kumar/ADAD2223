{"ast":null,"code":"import _classCallCheck from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { bytesToHex, readUInt16BE as _readUInt16BE, readUInt32BE as _readUInt32BE, readUInt8 as _readUInt } from '@stacks/common';\nfunction createEnumChecker(enumVariable) {\n  var enumValues = Object.values(enumVariable).filter(function (v) {\n    return typeof v === 'number';\n  });\n  var enumValueSet = new Set(enumValues);\n  return function (value) {\n    return enumValueSet.has(value);\n  };\n}\nvar enumCheckFunctions = new Map();\nexport function isEnum(enumVariable, value) {\n  var checker = enumCheckFunctions.get(enumVariable);\n  if (checker !== undefined) {\n    return checker(value);\n  }\n  var newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\nexport var BytesReader = /*#__PURE__*/function () {\n  function BytesReader(arr) {\n    _classCallCheck(this, BytesReader);\n    this.consumed = 0;\n    this.source = arr;\n  }\n  _createClass(BytesReader, [{\n    key: \"readBytes\",\n    value: function readBytes(length) {\n      var view = this.source.subarray(this.consumed, this.consumed + length);\n      this.consumed += length;\n      return view;\n    }\n  }, {\n    key: \"readUInt32BE\",\n    value: function readUInt32BE() {\n      return _readUInt32BE(this.readBytes(4), 0);\n    }\n  }, {\n    key: \"readUInt8\",\n    value: function readUInt8() {\n      return _readUInt(this.readBytes(1), 0);\n    }\n  }, {\n    key: \"readUInt16BE\",\n    value: function readUInt16BE() {\n      return _readUInt16BE(this.readBytes(2), 0);\n    }\n  }, {\n    key: \"readBigUIntLE\",\n    value: function readBigUIntLE(length) {\n      var bytes = this.readBytes(length).slice().reverse();\n      var hex = bytesToHex(bytes);\n      return BigInt(\"0x\".concat(hex));\n    }\n  }, {\n    key: \"readBigUIntBE\",\n    value: function readBigUIntBE(length) {\n      var bytes = this.readBytes(length);\n      var hex = bytesToHex(bytes);\n      return BigInt(\"0x\".concat(hex));\n    }\n  }, {\n    key: \"readOffset\",\n    get: function get() {\n      return this.consumed;\n    },\n    set: function set(val) {\n      this.consumed = val;\n    }\n  }, {\n    key: \"internalBytes\",\n    get: function get() {\n      return this.source;\n    }\n  }, {\n    key: \"readUInt8Enum\",\n    value: function readUInt8Enum(enumVariable, invalidEnumErrorFormatter) {\n      var num = this.readUInt8();\n      if (isEnum(enumVariable, num)) {\n        return num;\n      }\n      throw invalidEnumErrorFormatter(num);\n    }\n  }]);\n  return BytesReader;\n}();","map":{"version":3,"names":["bytesToHex","readUInt16BE","readUInt32BE","readUInt8","createEnumChecker","enumVariable","enumValues","Object","values","filter","v","enumValueSet","Set","value","has","enumCheckFunctions","Map","isEnum","checker","get","undefined","newChecker","set","BytesReader","arr","_classCallCheck","consumed","source","_createClass","key","readBytes","length","view","subarray","readBigUIntLE","bytes","slice","reverse","hex","BigInt","concat","readBigUIntBE","val","readUInt8Enum","invalidEnumErrorFormatter","num"],"sources":["C:\\Users\\rajde\\gitrep\\deploy\\frontend\\node_modules\\@stacks\\transactions\\src\\bytesReader.ts"],"sourcesContent":["import { bytesToHex, readUInt16BE, readUInt32BE, readUInt8 } from '@stacks/common';\n\nfunction createEnumChecker<T extends string, TEnumValue extends number>(enumVariable: {\n  [key in T]: TEnumValue;\n}): (value: number) => value is TEnumValue {\n  // Create a set of valid enum number values.\n  const enumValues = Object.values<number>(enumVariable).filter(v => typeof v === 'number');\n  const enumValueSet = new Set<number>(enumValues);\n  return (value: number): value is TEnumValue => enumValueSet.has(value);\n}\n\nconst enumCheckFunctions = new Map<object, (value: number) => boolean>();\n\n/**\n * Type guard to check if a given value is a valid enum value.\n * @param enumVariable - Literal `enum` type.\n * @param value - A value to check against the enum's values.\n * @example\n * ```ts\n * enum Color {\n *   Purple = 3,\n *   Orange = 5\n * }\n * const val: number = 3;\n * if (isEnum(Color, val)) {\n *   // `val` is known as enum type `Color`, e.g.:\n *   const colorVal: Color = val;\n * }\n * ```\n */\nexport function isEnum<T extends string, TEnumValue extends number>(\n  enumVariable: { [key in T]: TEnumValue },\n  value: number\n): value is TEnumValue {\n  const checker = enumCheckFunctions.get(enumVariable);\n  if (checker !== undefined) {\n    return checker(value);\n  }\n  const newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\n\nexport class BytesReader {\n  source: Uint8Array;\n  consumed: number = 0;\n\n  constructor(arr: Uint8Array) {\n    this.source = arr;\n  }\n\n  readBytes(length: number): Uint8Array {\n    const view = this.source.subarray(this.consumed, this.consumed + length);\n    this.consumed += length;\n    return view;\n  }\n\n  readUInt32BE(): number {\n    return readUInt32BE(this.readBytes(4), 0);\n  }\n\n  readUInt8(): number {\n    return readUInt8(this.readBytes(1), 0);\n  }\n\n  readUInt16BE(): number {\n    return readUInt16BE(this.readBytes(2), 0);\n  }\n\n  readBigUIntLE(length: number): bigint {\n    const bytes = this.readBytes(length).slice().reverse();\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  readBigUIntBE(length: number): bigint {\n    const bytes = this.readBytes(length);\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  // todo: remove or implement with DataView?\n  // readBigUInt64BE(): bigint {\n  //   return this.source.readBigUInt64BE();\n  // }\n\n  get readOffset(): number {\n    return this.consumed;\n  }\n\n  set readOffset(val: number) {\n    this.consumed = val;\n  }\n\n  get internalBytes(): Uint8Array {\n    return this.source;\n  }\n\n  readUInt8Enum<T extends string, TEnumValue extends number>(\n    enumVariable: { [key in T]: TEnumValue },\n    invalidEnumErrorFormatter: (val: number) => Error\n  ): TEnumValue {\n    const num = this.readUInt8();\n    if (isEnum(enumVariable, num)) {\n      return num;\n    }\n    throw invalidEnumErrorFormatter(num);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}