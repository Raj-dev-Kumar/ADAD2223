{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenVerifier = void 0;\nvar base64url = require(\"./base64Url\");\nvar cryptoClients_1 = require(\"./cryptoClients\");\nvar errors_1 = require(\"./errors\");\nvar sha256_1 = require(\"./cryptoClients/sha256\");\nvar TokenVerifier = /*#__PURE__*/function () {\n  function TokenVerifier(signingAlgorithm, rawPublicKey) {\n    _classCallCheck(this, TokenVerifier);\n    if (!(signingAlgorithm && rawPublicKey)) {\n      throw new errors_1.MissingParametersError('a signing algorithm and public key are required');\n    }\n    if (typeof signingAlgorithm !== 'string') {\n      throw 'signing algorithm parameter must be a string';\n    }\n    signingAlgorithm = signingAlgorithm.toUpperCase();\n    if (!cryptoClients_1.cryptoClients.hasOwnProperty(signingAlgorithm)) {\n      throw 'invalid signing algorithm';\n    }\n    this.tokenType = 'JWT';\n    this.cryptoClient = cryptoClients_1.cryptoClients[signingAlgorithm];\n    this.rawPublicKey = rawPublicKey;\n  }\n  _createClass(TokenVerifier, [{\n    key: \"verify\",\n    value: function verify(token) {\n      if (typeof token === 'string') {\n        return this.verifyCompact(token, false);\n      } else if (typeof token === 'object') {\n        return this.verifyExpanded(token, false);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"verifyAsync\",\n    value: function verifyAsync(token) {\n      if (typeof token === 'string') {\n        return this.verifyCompact(token, true);\n      } else if (typeof token === 'object') {\n        return this.verifyExpanded(token, true);\n      } else {\n        return Promise.resolve(false);\n      }\n    }\n  }, {\n    key: \"verifyCompact\",\n    value: function verifyCompact(token, async) {\n      var _this = this;\n      // decompose the token into parts\n      var tokenParts = token.split('.');\n      // calculate the signing input hash\n      var signingInput = tokenParts[0] + '.' + tokenParts[1];\n      var performVerify = function performVerify(signingInputHash) {\n        // extract the signature as a DER array\n        var derSignatureBytes = _this.cryptoClient.loadSignature(tokenParts[2]);\n        // verify the signed hash\n        return _this.cryptoClient.verifyHash(signingInputHash, derSignatureBytes, _this.rawPublicKey);\n      };\n      if (async) {\n        return (0, sha256_1.hashSha256Async)(signingInput).then(function (signingInputHash) {\n          return performVerify(signingInputHash);\n        });\n      } else {\n        var signingInputHash = (0, sha256_1.hashSha256)(signingInput);\n        return performVerify(signingInputHash);\n      }\n    }\n  }, {\n    key: \"verifyExpanded\",\n    value: function verifyExpanded(token, async) {\n      var _this2 = this;\n      var signingInput = [token['header'].join('.'), base64url.encode(token['payload'])].join('.');\n      var verified = true;\n      var performVerify = function performVerify(signingInputHash) {\n        token['signature'].map(function (signature) {\n          var derSignatureBytes = _this2.cryptoClient.loadSignature(signature);\n          var signatureVerified = _this2.cryptoClient.verifyHash(signingInputHash, derSignatureBytes, _this2.rawPublicKey);\n          if (!signatureVerified) {\n            verified = false;\n          }\n        });\n        return verified;\n      };\n      if (async) {\n        return (0, sha256_1.hashSha256Async)(signingInput).then(function (signingInputHash) {\n          return performVerify(signingInputHash);\n        });\n      } else {\n        var signingInputHash = (0, sha256_1.hashSha256)(signingInput);\n        return performVerify(signingInputHash);\n      }\n    }\n  }]);\n  return TokenVerifier;\n}();\nexports.TokenVerifier = TokenVerifier;","map":{"version":3,"names":["base64url","require","cryptoClients_1","errors_1","sha256_1","TokenVerifier","signingAlgorithm","rawPublicKey","_classCallCheck","MissingParametersError","toUpperCase","cryptoClients","hasOwnProperty","tokenType","cryptoClient","_createClass","key","value","verify","token","verifyCompact","verifyExpanded","verifyAsync","Promise","resolve","async","_this","tokenParts","split","signingInput","performVerify","signingInputHash","derSignatureBytes","loadSignature","verifyHash","hashSha256Async","then","hashSha256","_this2","join","encode","verified","map","signature","signatureVerified","exports"],"sources":["verifier.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}