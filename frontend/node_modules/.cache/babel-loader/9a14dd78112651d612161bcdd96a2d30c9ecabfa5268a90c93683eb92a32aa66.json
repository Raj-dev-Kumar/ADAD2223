{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createClass from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _asyncToGenerator from \"C:/Users/rajde/gitrep/deploy/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { validateMnemonic, mnemonicToEntropy, entropyToMnemonic } from '@scure/bip39';\nimport { wordlist } from '@scure/bip39/wordlists/english';\nimport { randomBytes } from './cryptoRandom';\nimport { createSha2Hash } from './sha2Hash';\nimport { createCipher } from './aesCipher';\nimport { createPbkdf2 } from './pbkdf2';\nimport { bytesToHex, bytesToUtf8, concatBytes, equals, hexToBytes, utf8ToBytes } from '@stacks/common';\nimport { hmacSha256 } from './ec';\nexport function encryptMnemonic(_x, _x2, _x3) {\n  return _encryptMnemonic.apply(this, arguments);\n}\nfunction _encryptMnemonic() {\n  _encryptMnemonic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(phrase, password, opts) {\n    var mnemonicEntropy, entropyBytes, plaintextNormalized, pbkdf2, salt, keysAndIV, encKey, macKey, iv, cipher, cipherText, hmacPayload, hmacDigest, payload;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          entropyBytes = mnemonicToEntropy(phrase, wordlist);\n          mnemonicEntropy = bytesToHex(entropyBytes);\n          _context.next = 10;\n          break;\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.error('Invalid mnemonic phrase provided');\n          console.error(_context.t0);\n          throw new Error('Not a valid bip39 mnemonic');\n        case 10:\n          plaintextNormalized = hexToBytes(mnemonicEntropy);\n          _context.next = 13;\n          return createPbkdf2();\n        case 13:\n          pbkdf2 = _context.sent;\n          salt = opts !== null && opts !== void 0 && opts.getRandomBytes ? opts.getRandomBytes(16) : randomBytes(16);\n          _context.next = 17;\n          return pbkdf2.derive(password, salt, 100000, 48, 'sha512');\n        case 17:\n          keysAndIV = _context.sent;\n          encKey = keysAndIV.slice(0, 16);\n          macKey = keysAndIV.slice(16, 32);\n          iv = keysAndIV.slice(32, 48);\n          _context.next = 23;\n          return createCipher();\n        case 23:\n          cipher = _context.sent;\n          _context.next = 26;\n          return cipher.encrypt('aes-128-cbc', encKey, iv, plaintextNormalized);\n        case 26:\n          cipherText = _context.sent;\n          hmacPayload = concatBytes(salt, cipherText);\n          hmacDigest = hmacSha256(macKey, hmacPayload);\n          payload = concatBytes(salt, hmacDigest, cipherText);\n          return _context.abrupt(\"return\", payload);\n        case 31:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 5]]);\n  }));\n  return _encryptMnemonic.apply(this, arguments);\n}\nvar PasswordError = /*#__PURE__*/function (_Error) {\n  _inherits(PasswordError, _Error);\n  var _super = _createSuper(PasswordError);\n  function PasswordError() {\n    _classCallCheck(this, PasswordError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(PasswordError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nfunction decryptMnemonicBytes(_x4, _x5) {\n  return _decryptMnemonicBytes.apply(this, arguments);\n}\nfunction _decryptMnemonicBytes() {\n  _decryptMnemonicBytes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dataBytes, password) {\n    var salt, hmacSig, cipherText, hmacPayload, pbkdf2, keysAndIV, encKey, macKey, iv, decipher, decryptedResult, hmacDigest, sha2Hash, hmacSigHash, hmacDigestHash, mnemonic;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          salt = dataBytes.slice(0, 16);\n          hmacSig = dataBytes.slice(16, 48);\n          cipherText = dataBytes.slice(48);\n          hmacPayload = concatBytes(salt, cipherText);\n          _context2.next = 6;\n          return createPbkdf2();\n        case 6:\n          pbkdf2 = _context2.sent;\n          _context2.next = 9;\n          return pbkdf2.derive(password, salt, 100000, 48, 'sha512');\n        case 9:\n          keysAndIV = _context2.sent;\n          encKey = keysAndIV.slice(0, 16);\n          macKey = keysAndIV.slice(16, 32);\n          iv = keysAndIV.slice(32, 48);\n          _context2.next = 15;\n          return createCipher();\n        case 15:\n          decipher = _context2.sent;\n          _context2.next = 18;\n          return decipher.decrypt('aes-128-cbc', encKey, iv, cipherText);\n        case 18:\n          decryptedResult = _context2.sent;\n          hmacDigest = hmacSha256(macKey, hmacPayload);\n          _context2.next = 22;\n          return createSha2Hash();\n        case 22:\n          sha2Hash = _context2.sent;\n          _context2.next = 25;\n          return sha2Hash.digest(hmacSig);\n        case 25:\n          hmacSigHash = _context2.sent;\n          _context2.next = 28;\n          return sha2Hash.digest(hmacDigest);\n        case 28:\n          hmacDigestHash = _context2.sent;\n          if (equals(hmacSigHash, hmacDigestHash)) {\n            _context2.next = 31;\n            break;\n          }\n          throw new PasswordError('Wrong password (HMAC mismatch)');\n        case 31:\n          _context2.prev = 31;\n          mnemonic = entropyToMnemonic(decryptedResult, wordlist);\n          _context2.next = 40;\n          break;\n        case 35:\n          _context2.prev = 35;\n          _context2.t0 = _context2[\"catch\"](31);\n          console.error('Error thrown by `entropyToMnemonic`');\n          console.error(_context2.t0);\n          throw new PasswordError('Wrong password (invalid plaintext)');\n        case 40:\n          if (validateMnemonic(mnemonic, wordlist)) {\n            _context2.next = 42;\n            break;\n          }\n          throw new PasswordError('Wrong password (invalid plaintext)');\n        case 42:\n          return _context2.abrupt(\"return\", mnemonic);\n        case 43:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[31, 35]]);\n  }));\n  return _decryptMnemonicBytes.apply(this, arguments);\n}\nfunction decryptLegacy(dataBytes, password, triplesecDecrypt) {\n  return new Promise(function (resolve, reject) {\n    if (!triplesecDecrypt) {\n      reject(new Error('The `triplesec.decrypt` function must be provided'));\n    }\n    triplesecDecrypt({\n      key: utf8ToBytes(password),\n      data: dataBytes\n    }, function (err, plaintextBytes) {\n      if (!err) {\n        resolve(plaintextBytes);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\nexport function decryptMnemonic(_x6, _x7, _x8) {\n  return _decryptMnemonic.apply(this, arguments);\n}\nfunction _decryptMnemonic() {\n  _decryptMnemonic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data, password, triplesecDecrypt) {\n    var dataBytes, _data;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          dataBytes = typeof data === 'string' ? hexToBytes(data) : data;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return decryptMnemonicBytes(dataBytes, password);\n        case 4:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](1);\n          if (!(_context3.t0 instanceof PasswordError)) {\n            _context3.next = 11;\n            break;\n          }\n          throw _context3.t0;\n        case 11:\n          _context3.next = 13;\n          return decryptLegacy(dataBytes, password, triplesecDecrypt);\n        case 13:\n          _data = _context3.sent;\n          return _context3.abrupt(\"return\", bytesToUtf8(_data));\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[1, 7]]);\n  }));\n  return _decryptMnemonic.apply(this, arguments);\n}","map":{"version":3,"names":["validateMnemonic","mnemonicToEntropy","entropyToMnemonic","wordlist","randomBytes","createSha2Hash","createCipher","createPbkdf2","bytesToHex","bytesToUtf8","concatBytes","equals","hexToBytes","utf8ToBytes","hmacSha256","encryptMnemonic","_x","_x2","_x3","_encryptMnemonic","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","phrase","password","opts","mnemonicEntropy","entropyBytes","plaintextNormalized","pbkdf2","salt","keysAndIV","encKey","macKey","iv","cipher","cipherText","hmacPayload","hmacDigest","payload","wrap","_callee$","_context","prev","next","t0","console","error","Error","sent","getRandomBytes","derive","slice","encrypt","abrupt","stop","PasswordError","_Error","_inherits","_super","_createSuper","_classCallCheck","_createClass","_wrapNativeSuper","decryptMnemonicBytes","_x4","_x5","_decryptMnemonicBytes","_callee2","dataBytes","hmacSig","decipher","decryptedResult","sha2Hash","hmacSigHash","hmacDigestHash","mnemonic","_callee2$","_context2","decrypt","digest","decryptLegacy","triplesecDecrypt","Promise","resolve","reject","key","data","err","plaintextBytes","decryptMnemonic","_x6","_x7","_x8","_decryptMnemonic","_callee3","_data","_callee3$","_context3"],"sources":["C:\\Users\\rajde\\gitrep\\deploy\\frontend\\node_modules\\@stacks\\encryption\\src\\wallet.ts"],"sourcesContent":["// https://github.com/paulmillr/scure-bip39\n// Secure, audited & minimal implementation of BIP39 mnemonic phrases.\nimport { validateMnemonic, mnemonicToEntropy, entropyToMnemonic } from '@scure/bip39';\n// Word lists not imported by default as that would increase bundle sizes too much as in case of bitcoinjs/bip39\n// Use default english world list similiar to bitcoinjs/bip39\n// Backward compatible with bitcoinjs/bip39 dependency\n// Very small in size as compared to bitcoinjs/bip39 wordlist\n// Reference: https://github.com/paulmillr/scure-bip39\nimport { wordlist } from '@scure/bip39/wordlists/english';\nimport { randomBytes, GetRandomBytes } from './cryptoRandom';\nimport { createSha2Hash } from './sha2Hash';\nimport { createCipher } from './aesCipher';\nimport { createPbkdf2 } from './pbkdf2';\nimport { TriplesecDecryptSignature } from './cryptoUtils';\nimport {\n  bytesToHex,\n  bytesToUtf8,\n  concatBytes,\n  equals,\n  hexToBytes,\n  utf8ToBytes,\n} from '@stacks/common';\nimport { hmacSha256 } from './ec';\n\n/**\n * Encrypt a raw mnemonic phrase to be password protected\n * @param {string} phrase - Raw mnemonic phrase\n * @param {string} password - Password to encrypt mnemonic with\n * @return {Promise<Uint8Array>} The encrypted phrase\n * @ignore\n * */\nexport async function encryptMnemonic(\n  phrase: string,\n  password: string,\n  opts?: {\n    getRandomBytes?: GetRandomBytes;\n  }\n): Promise<Uint8Array> {\n  // hex encoded mnemonic string\n  let mnemonicEntropy: string;\n  try {\n    // must be bip39 mnemonic\n    // `mnemonicToEntropy` converts mnemonic string to raw entropy in form of byte array\n    const entropyBytes = mnemonicToEntropy(phrase, wordlist);\n    // Convert byte array to hex string\n    mnemonicEntropy = bytesToHex(entropyBytes);\n  } catch (error) {\n    console.error('Invalid mnemonic phrase provided');\n    console.error(error);\n    throw new Error('Not a valid bip39 mnemonic');\n  }\n\n  // normalize plaintext to fixed length byte string\n  const plaintextNormalized = hexToBytes(mnemonicEntropy);\n\n  // AES-128-CBC with SHA256 HMAC\n  const pbkdf2 = await createPbkdf2();\n  const salt = opts?.getRandomBytes ? opts.getRandomBytes(16) : randomBytes(16);\n  const keysAndIV = await pbkdf2.derive(password, salt, 100_000, 48, 'sha512');\n  const encKey = keysAndIV.slice(0, 16);\n  const macKey = keysAndIV.slice(16, 32);\n  const iv = keysAndIV.slice(32, 48);\n\n  const cipher = await createCipher();\n  const cipherText = await cipher.encrypt('aes-128-cbc', encKey, iv, plaintextNormalized);\n\n  const hmacPayload = concatBytes(salt, cipherText);\n  const hmacDigest = hmacSha256(macKey, hmacPayload);\n\n  const payload = concatBytes(salt, hmacDigest, cipherText);\n  return payload;\n}\n\n// Used to distinguish bad password during decrypt vs invalid format\nclass PasswordError extends Error {}\n\n/**\n * @ignore\n */\nasync function decryptMnemonicBytes(dataBytes: Uint8Array, password: string): Promise<string> {\n  const salt = dataBytes.slice(0, 16);\n  const hmacSig = dataBytes.slice(16, 48); // 32 bytes\n  const cipherText = dataBytes.slice(48);\n  const hmacPayload = concatBytes(salt, cipherText);\n\n  const pbkdf2 = await createPbkdf2();\n  const keysAndIV = await pbkdf2.derive(password, salt, 100000, 48, 'sha512');\n  const encKey = keysAndIV.slice(0, 16);\n  const macKey = keysAndIV.slice(16, 32);\n  const iv = keysAndIV.slice(32, 48);\n\n  const decipher = await createCipher();\n  const decryptedResult = await decipher.decrypt('aes-128-cbc', encKey, iv, cipherText);\n\n  const hmacDigest = hmacSha256(macKey, hmacPayload);\n\n  // hash both hmacSig and hmacDigest so string comparison time\n  // is uncorrelated to the ciphertext\n  const sha2Hash = await createSha2Hash();\n  const hmacSigHash = await sha2Hash.digest(hmacSig);\n  const hmacDigestHash = await sha2Hash.digest(hmacDigest);\n\n  if (!equals(hmacSigHash, hmacDigestHash)) {\n    // not authentic\n    throw new PasswordError('Wrong password (HMAC mismatch)');\n  }\n\n  let mnemonic: string;\n  try {\n    // Converts raw entropy in form of byte array to mnemonic string\n    mnemonic = entropyToMnemonic(decryptedResult, wordlist);\n  } catch (error) {\n    console.error('Error thrown by `entropyToMnemonic`');\n    console.error(error);\n    throw new PasswordError('Wrong password (invalid plaintext)');\n  }\n  // Validates mnemonic for being 12-24 words contained in `wordlist`\n  if (!validateMnemonic(mnemonic, wordlist)) {\n    throw new PasswordError('Wrong password (invalid plaintext)');\n  }\n\n  return mnemonic;\n}\n\n/**\n * Decrypt legacy triplesec keys\n * @param {Uint8Array} dataBytes - The encrypted key\n * @param {String} password - Password for data\n * @return {Promise<BuUint8Arrayffer>} Decrypted seed\n * @ignore\n */\nfunction decryptLegacy(\n  dataBytes: Uint8Array,\n  password: string,\n  triplesecDecrypt?: TriplesecDecryptSignature\n): Promise<Uint8Array> {\n  return new Promise<Uint8Array>((resolve, reject) => {\n    if (!triplesecDecrypt) {\n      reject(new Error('The `triplesec.decrypt` function must be provided'));\n    }\n    triplesecDecrypt!(\n      {\n        key: utf8ToBytes(password),\n        data: dataBytes,\n      },\n      (err, plaintextBytes) => {\n        if (!err) {\n          resolve(plaintextBytes!);\n        } else {\n          reject(err);\n        }\n      }\n    );\n  });\n}\n\n/**\n * Decrypt an encrypted mnemonic phrase with a password.\n * Legacy triplesec encrypted payloads are also supported.\n * @param data - Bytes or hex-encoded string of the encrypted mnemonic\n * @param password - Password for data\n * @return {string} the raw mnemonic phrase\n * @ignore\n */\nexport async function decryptMnemonic(\n  data: string | Uint8Array,\n  password: string,\n  triplesecDecrypt?: TriplesecDecryptSignature\n): Promise<string> {\n  const dataBytes = typeof data === 'string' ? hexToBytes(data) : data;\n  try {\n    return await decryptMnemonicBytes(dataBytes, password);\n  } catch (error) {\n    if (error instanceof PasswordError) throw error;\n    const data = await decryptLegacy(dataBytes, password, triplesecDecrypt);\n    return bytesToUtf8(data);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}